# Generated by Django 4.1.11 on 2023-11-23 06:50

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import extras.models
import extras.validators
import mptt.fields
import registry.models.document
import registry.models.harvest
import registry.models.mapcontext
import registry.models.security
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_celery_results', '0011_taskresult_periodic_task_name'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AllowedWebFeatureServiceOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, validators=[extras.validators.geometry_is_empty])),
                ('description', models.CharField(default='', help_text='a short description what this allowed operation controls.', max_length=512, verbose_name='description')),
            ],
            options={
                'ordering': ['-secured_service'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AllowedWebMapServiceOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, validators=[extras.validators.geometry_is_empty])),
                ('description', models.CharField(default='', help_text='a short description what this allowed operation controls.', max_length=512, verbose_name='description')),
            ],
            options={
                'ordering': ['-secured_service'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnalyzedResponseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_count', models.FloatField(help_text='Stores the response entity count. For WMS this will be the indiscreet number of megapixels that are returned by the service. For WFS this will be discrete number of feature types that are returned by the service.')),
                ('entity_total_count', models.FloatField(help_text='Stores the response entity total count. For WMS this will be the indiscreet number of megapixels that are returned by the service. For WFS this will be discrete number of feature types that are returned by the service.')),
            ],
        ),
        migrations.CreateModel(
            name='CatalogueService',
            fields=[
                ('xml_backup_file', models.FileField(editable=False, help_text='the original xml as backup to restore the xml field.', upload_to=registry.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('version', models.CharField(choices=[('1.0.0', 'V 1 0 0'), ('1.1.0', 'V 1 1 0'), ('1.1.1', 'V 1 1 1'), ('1.3.0', 'V 1 3 0'), ('2.0.0', 'V 2 0 0'), ('2.0.2', 'V 2 0 2')], editable=False, help_text='the version of the service type as sem version', max_length=10, verbose_name='version')),
                ('service_url', models.URLField(editable=False, help_text='the base url of the service', max_length=4096, verbose_name='url')),
            ],
            options={
                'verbose_name': 'catalogue service',
                'verbose_name_plural': 'catalogue services',
            },
            bases=(extras.models.HistoricalRecordMixin, models.Model),
            managers=[
                ('capabilities', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CatalogueServiceAuthentication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='the username used for the authentication.', max_length=255, verbose_name='username')),
                ('password', models.CharField(help_text='the password used for the authentication.', max_length=500, verbose_name='password')),
                ('auth_type', models.CharField(choices=[('http_basic', 'Basic'), ('http_digest', 'Digest')], help_text='kind of authentication mechanism shall used.', max_length=100, verbose_name='authentication type')),
                ('key_file', models.FileField(editable=False, max_length=1024, upload_to=registry.models.security.key_file_path)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogueServiceOperationUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('Get', 'Get'), ('Post', 'Post')], help_text='the http method you can perform for this url', max_length=10, verbose_name='http method')),
                ('url', models.URLField(editable=False, help_text='the url for this operation', max_length=4096, verbose_name='url')),
                ('operation', models.CharField(choices=[('GetCapabilities', 'Get Capabilities'), ('GetMap', 'Get Map'), ('GetFeatureInfo', 'Get Feature Info'), ('DescribeLayer', 'Describe Layer'), ('GetLegendGraphic', 'Get Legend Graphic'), ('GetStyles', 'Get Styles'), ('PutStyles', 'Put Styles'), ('GetFeature', 'Get Feature'), ('Transaction', 'Transaction'), ('LockFeature', 'Lock Feature'), ('DescribeFeatureType', 'Describe Feature Type'), ('GetFeatureWithLock', 'Get Feature With Lock'), ('GetGmlObject', 'Get Gml Object'), ('ListStoredQueries', 'List Stored Queries'), ('GetPropertyValue', 'Get Property Value'), ('DescribeStoredQueries', 'Describe Stored Queries'), ('GetRecords', 'Get Records'), ('DescribeRecord', 'Describe Record'), ('GetRecordById', 'Get Record By Id')], editable=False, help_text='the operation you can perform with this url.', max_length=30, verbose_name='operation')),
            ],
        ),
        migrations.CreateModel(
            name='ConformityCheckConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('metadata_types', models.JSONField()),
                ('conformity_type', models.TextField(choices=[('internal', 'Internal'), ('etf', 'Etf')])),
            ],
        ),
        migrations.CreateModel(
            name='DatasetMetadataConformityCheckRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField(blank=True, null=True)),
                ('report', models.TextField(blank=True, null=True)),
                ('report_type', models.TextField(choices=[('text/html', 'Html'), ('application/json', 'Json')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetMetadataRecord',
            fields=[
                ('xml_backup_file', models.FileField(editable=False, help_text='the original xml as backup to restore the xml field.', upload_to=registry.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('bounding_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('inspire_interoperability', models.BooleanField(default=False, help_text='flag to signal if this ')),
                ('spatial_res_type', models.CharField(choices=[('groundDistance', 'Ground Distance'), ('scaleDenominator', 'Scale Distance')], default='', help_text='Ground resolution in meter or the equivalent scale.', max_length=20, verbose_name='resolution type')),
                ('spatial_res_value', models.FloatField(blank=True, help_text='The value depending on the selected resolution type.', null=True, verbose_name='resolution value')),
                ('dataset_id', models.CharField(default='', help_text='identifier of the remote data', max_length=4096)),
                ('dataset_id_code_space', models.CharField(blank=True, default='', help_text='code space for the given identifier', max_length=4096)),
                ('format', models.CharField(blank=True, choices=[('Database', 'Database'), ('Esri shape', 'Esri Shape'), ('CSV', 'Csv'), ('GML', 'Gml'), ('GeoTIFF', 'Geotiff')], default='', help_text='The format in which the described dataset is stored.', max_length=20, verbose_name='format')),
                ('charset', models.CharField(blank=True, choices=[('utf8', 'Utf8')], default='', help_text='The charset which is used by the stored data.', max_length=10, verbose_name='charset')),
                ('inspire_top_consistence', models.BooleanField(default=False, help_text='Flag to signal if the described data has a topologically consistence.')),
                ('preview_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('lineage_statement', models.TextField(blank=True, default='')),
                ('update_frequency_code', models.CharField(blank=True, choices=[('annually', 'annually'), ('asNeeded', 'asNeeded'), ('biannually', 'biannually'), ('irregular', 'irregular'), ('notPlanned', 'notPlanned'), ('unknown', 'unknown')], default='', max_length=20)),
            ],
            options={
                'verbose_name': 'dataset metadata',
                'verbose_name_plural': 'dataset metadata',
            },
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='the type of the content stored in extent field.', max_length=50, verbose_name='name')),
                ('units', models.CharField(help_text='measurement units specifier', max_length=50, verbose_name='units')),
                ('parsed_extent', models.TextField(help_text='The extent string declares what value(s) along the Dimension axis are appropriate for this specific geospatial data object.', verbose_name='extent')),
            ],
        ),
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('xml_backup_file', models.FileField(editable=False, help_text='the original xml as backup to restore the xml field.', upload_to=registry.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('identifier', models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier')),
                ('bbox_lat_lon', django.contrib.gis.db.models.fields.PolygonField(blank=True, editable=False, help_text='bounding box shall be supplied regardless of what CRS the map server may support, but it may be approximate if the data are not natively in geographic coordinates. The purpose of bounding box is to facilitate geographic searches without requiring coordinate transformations by the search engine.', null=True, srid=4326, verbose_name='bounding box')),
                ('describe_feature_type_document', models.TextField(help_text='the fetched content of the download describe feature type document.', null=True, verbose_name='describe feature type')),
            ],
            options={
                'verbose_name': 'feature type',
                'verbose_name_plural': 'feature types',
            },
            bases=(extras.models.HistoricalRecordMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FeatureTypeConformityCheckRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField(blank=True, null=True)),
                ('report', models.TextField(blank=True, null=True)),
                ('report_type', models.TextField(choices=[('text/html', 'Html'), ('application/json', 'Json')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureTypeProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_occurs', models.IntegerField(default=1, help_text='The maximum count this property is part of a feature type')),
                ('min_occurs', models.IntegerField(default=0, help_text='The minimum count this property is part of a feature type')),
                ('name', models.CharField(help_text='The identifing type name of the property', max_length=255)),
                ('data_type', models.CharField(blank=True, help_text='The concrete data type of this property', max_length=255, null=True)),
                ('required', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'feature type property',
                'verbose_name_plural': 'feature type properties',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='HarvestingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('harvest_datasets', models.BooleanField(default=True)),
                ('harvest_services', models.BooleanField(default=True)),
                ('total_records', models.IntegerField(blank=True, editable=False, help_text='total count of records which will be harvested by this job', null=True, verbose_name='total records')),
                ('step_size', models.IntegerField(blank=True, default=50)),
                ('started_at', models.DateTimeField(blank=True, editable=False, help_text='timestamp of start', null=True, verbose_name='date started')),
                ('done_at', models.DateTimeField(blank=True, editable=False, help_text='timestamp of done', null=True, verbose_name='date done')),
            ],
            options={
                'ordering': ['-done_at'],
                'get_latest_by': 'done_at',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCatalogueService',
            fields=[
                ('xml_backup_file', models.TextField(editable=False, help_text='the original xml as backup to restore the xml field.', max_length=100, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_stamp', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('version', models.CharField(choices=[('1.0.0', 'V 1 0 0'), ('1.1.0', 'V 1 1 0'), ('1.1.1', 'V 1 1 1'), ('1.3.0', 'V 1 3 0'), ('2.0.0', 'V 2 0 0'), ('2.0.2', 'V 2 0 2')], editable=False, help_text='the version of the service type as sem version', max_length=10, verbose_name='version')),
                ('service_url', models.URLField(editable=False, help_text='the base url of the service', max_length=4096, verbose_name='url')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical catalogue service',
                'verbose_name_plural': 'historical catalogue services',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDatasetMetadataRecord',
            fields=[
                ('xml_backup_file', models.TextField(editable=False, help_text='the original xml as backup to restore the xml field.', max_length=100, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_stamp', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('bounding_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('inspire_interoperability', models.BooleanField(default=False, help_text='flag to signal if this ')),
                ('spatial_res_type', models.CharField(choices=[('groundDistance', 'Ground Distance'), ('scaleDenominator', 'Scale Distance')], default='', help_text='Ground resolution in meter or the equivalent scale.', max_length=20, verbose_name='resolution type')),
                ('spatial_res_value', models.FloatField(blank=True, help_text='The value depending on the selected resolution type.', null=True, verbose_name='resolution value')),
                ('dataset_id', models.CharField(default='', help_text='identifier of the remote data', max_length=4096)),
                ('dataset_id_code_space', models.CharField(blank=True, default='', help_text='code space for the given identifier', max_length=4096)),
                ('format', models.CharField(blank=True, choices=[('Database', 'Database'), ('Esri shape', 'Esri Shape'), ('CSV', 'Csv'), ('GML', 'Gml'), ('GeoTIFF', 'Geotiff')], default='', help_text='The format in which the described dataset is stored.', max_length=20, verbose_name='format')),
                ('charset', models.CharField(blank=True, choices=[('utf8', 'Utf8')], default='', help_text='The charset which is used by the stored data.', max_length=10, verbose_name='charset')),
                ('inspire_top_consistence', models.BooleanField(default=False, help_text='Flag to signal if the described data has a topologically consistence.')),
                ('preview_image', models.TextField(blank=True, max_length=100, null=True)),
                ('lineage_statement', models.TextField(blank=True, default='')),
                ('update_frequency_code', models.CharField(blank=True, choices=[('annually', 'annually'), ('asNeeded', 'asNeeded'), ('biannually', 'biannually'), ('irregular', 'irregular'), ('notPlanned', 'notPlanned'), ('unknown', 'unknown')], default='', max_length=20)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical dataset metadata',
                'verbose_name_plural': 'historical dataset metadata',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFeatureType',
            fields=[
                ('xml_backup_file', models.TextField(editable=False, help_text='the original xml as backup to restore the xml field.', max_length=100, verbose_name='xml backup')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_stamp', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('identifier', models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier')),
                ('bbox_lat_lon', django.contrib.gis.db.models.fields.PolygonField(blank=True, editable=False, help_text='bounding box shall be supplied regardless of what CRS the map server may support, but it may be approximate if the data are not natively in geographic coordinates. The purpose of bounding box is to facilitate geographic searches without requiring coordinate transformations by the search engine.', null=True, srid=4326, verbose_name='bounding box')),
                ('describe_feature_type_document', models.TextField(help_text='the fetched content of the download describe feature type document.', null=True, verbose_name='describe feature type')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical feature type',
                'verbose_name_plural': 'historical feature types',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLayer',
            fields=[
                ('xml_backup_file', models.TextField(editable=False, help_text='the original xml as backup to restore the xml field.', max_length=100, verbose_name='xml backup')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_stamp', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('preview_image', models.TextField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('identifier', models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier')),
                ('bbox_lat_lon', django.contrib.gis.db.models.fields.PolygonField(blank=True, editable=False, help_text='bounding box shall be supplied regardless of what CRS the map server may support, but it may be approximate if the data are not natively in geographic coordinates. The purpose of bounding box is to facilitate geographic searches without requiring coordinate transformations by the search engine.', null=True, srid=4326, verbose_name='bounding box')),
                ('is_queryable', models.BooleanField(default=False, editable=False, help_text='flag to signal if this layer provides factual information or not. Parsed from capabilities.', verbose_name='is queryable')),
                ('is_opaque', models.BooleanField(default=False, editable=False, help_text='flag to signal if this layer support transparency content or not. Parsed from capabilities.', verbose_name='is opaque')),
                ('is_cascaded', models.BooleanField(default=False, editable=False, help_text='WMS cascading allows to expose layers coming from other WMS servers as if they were local layers', verbose_name='is cascaded')),
                ('scale_min', models.FloatField(blank=True, editable=False, help_text='minimum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale minimum value')),
                ('scale_max', models.FloatField(blank=True, editable=False, help_text='maximum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale maximum value')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical layer',
                'verbose_name_plural': 'historical layers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMapContext',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(help_text='a short descriptive title for this map context', max_length=1000, verbose_name='title')),
                ('language', models.CharField(choices=[('de', 'de'), ('en', 'en')], default='en', help_text='language of context document', max_length=4, verbose_name='language')),
                ('abstract', models.TextField(blank=True, help_text='brief summary of the topic of this map context', null=True, verbose_name='abstract')),
                ('pixel_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='pixel width')),
                ('pixel_height', models.PositiveIntegerField(blank=True, null=True)),
                ('mm_per_pixel', models.FloatField(blank=True, null=True)),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical map context',
                'verbose_name_plural': 'historical map contexts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMapContextLayer',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('layer_scale_min', models.FloatField(blank=True, help_text='minimum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale minimum value')),
                ('layer_scale_max', models.FloatField(blank=True, help_text='maximum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale maximum value')),
                ('preview_image', models.TextField(blank=True, help_text='A preview image for the Map Context Layer', max_length=100, null=True, verbose_name='preview image')),
                ('rendering_active', models.BooleanField(blank=True, default=True, help_text='should this offering be visible?', verbose_name='rendering active')),
                ('selection_active', models.BooleanField(blank=True, default=True, help_text='should this offering be visible?', verbose_name='rendering active')),
                ('title', models.CharField(help_text='an identifying name for this map context layer', max_length=1000, verbose_name='title')),
                ('description', models.CharField(blank=True, help_text='a short description for this map context layer', max_length=1000, null=True, verbose_name='description')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical map context layer',
                'verbose_name_plural': 'historical map context layers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalServiceMetadataRecord',
            fields=[
                ('xml_backup_file', models.TextField(editable=False, help_text='the original xml as backup to restore the xml field.', max_length=100, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_stamp', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('bounding_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('inspire_interoperability', models.BooleanField(default=False, help_text='flag to signal if this ')),
                ('spatial_res_type', models.CharField(choices=[('groundDistance', 'Ground Distance'), ('scaleDenominator', 'Scale Distance')], default='', help_text='Ground resolution in meter or the equivalent scale.', max_length=20, verbose_name='resolution type')),
                ('spatial_res_value', models.FloatField(blank=True, help_text='The value depending on the selected resolution type.', null=True, verbose_name='resolution value')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical service metadata record',
                'verbose_name_plural': 'historical service metadata records',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWebFeatureService',
            fields=[
                ('xml_backup_file', models.TextField(editable=False, help_text='the original xml as backup to restore the xml field.', max_length=100, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_stamp', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('version', models.CharField(choices=[('1.0.0', 'V 1 0 0'), ('1.1.0', 'V 1 1 0'), ('1.1.1', 'V 1 1 1'), ('1.3.0', 'V 1 3 0'), ('2.0.0', 'V 2 0 0'), ('2.0.2', 'V 2 0 2')], editable=False, help_text='the version of the service type as sem version', max_length=10, verbose_name='version')),
                ('service_url', models.URLField(editable=False, help_text='the base url of the service', max_length=4096, verbose_name='url')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical web feature service',
                'verbose_name_plural': 'historical web feature services',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWebMapService',
            fields=[
                ('xml_backup_file', models.TextField(editable=False, help_text='the original xml as backup to restore the xml field.', max_length=100, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_stamp', models.DateTimeField(blank=True, db_index=True, editable=False, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('version', models.CharField(choices=[('1.0.0', 'V 1 0 0'), ('1.1.0', 'V 1 1 0'), ('1.1.1', 'V 1 1 1'), ('1.3.0', 'V 1 3 0'), ('2.0.0', 'V 2 0 0'), ('2.0.2', 'V 2 0 2')], editable=False, help_text='the version of the service type as sem version', max_length=10, verbose_name='version')),
                ('service_url', models.URLField(editable=False, help_text='the base url of the service', max_length=4096, verbose_name='url')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical web map service',
                'verbose_name_plural': 'historical web map services',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['keyword'],
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('xml_backup_file', models.FileField(editable=False, help_text='the original xml as backup to restore the xml field.', upload_to=registry.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('preview_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('identifier', models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier')),
                ('bbox_lat_lon', django.contrib.gis.db.models.fields.PolygonField(blank=True, editable=False, help_text='bounding box shall be supplied regardless of what CRS the map server may support, but it may be approximate if the data are not natively in geographic coordinates. The purpose of bounding box is to facilitate geographic searches without requiring coordinate transformations by the search engine.', null=True, srid=4326, verbose_name='bounding box')),
                ('is_queryable', models.BooleanField(default=False, editable=False, help_text='flag to signal if this layer provides factual information or not. Parsed from capabilities.', verbose_name='is queryable')),
                ('is_opaque', models.BooleanField(default=False, editable=False, help_text='flag to signal if this layer support transparency content or not. Parsed from capabilities.', verbose_name='is opaque')),
                ('is_cascaded', models.BooleanField(default=False, editable=False, help_text='WMS cascading allows to expose layers coming from other WMS servers as if they were local layers', verbose_name='is cascaded')),
                ('scale_min', models.FloatField(blank=True, editable=False, help_text='minimum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale minimum value')),
                ('scale_max', models.FloatField(blank=True, editable=False, help_text='maximum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale maximum value')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'layer',
                'verbose_name_plural': 'layers',
            },
            bases=(extras.models.HistoricalRecordMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LayerConformityCheckRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField(blank=True, null=True)),
                ('report', models.TextField(blank=True, null=True)),
                ('report_type', models.TextField(choices=[('text/html', 'Html'), ('application/json', 'Json')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LayerGetFeatureInfoResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.IntegerField(default=0, editable=False, help_text='The http status code of the response', verbose_name='HTTP status code')),
                ('error_msg', models.TextField(blank=True, editable=False, help_text='The error message of the http response or other error description', null=True, verbose_name='error message')),
                ('monitored_uri', models.URLField(editable=False, help_text='This is the url which was monitored', max_length=4096, verbose_name='monitored uri')),
                ('request_duration', models.DurationField(blank=True, editable=False, help_text='elapsed time of the request', null=True, verbose_name='request duration')),
            ],
            options={
                'ordering': ['-task_result__date_done'],
                'get_latest_by': 'task_result__date_done',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LayerGetMapResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.IntegerField(default=0, editable=False, help_text='The http status code of the response', verbose_name='HTTP status code')),
                ('error_msg', models.TextField(blank=True, editable=False, help_text='The error message of the http response or other error description', null=True, verbose_name='error message')),
                ('monitored_uri', models.URLField(editable=False, help_text='This is the url which was monitored', max_length=4096, verbose_name='monitored uri')),
                ('request_duration', models.DurationField(blank=True, editable=False, help_text='elapsed time of the request', null=True, verbose_name='request duration')),
            ],
            options={
                'ordering': ['-task_result__date_done'],
                'get_latest_by': 'task_result__date_done',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LegendUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legend_url', models.URLField(editable=False, help_text='contains the location of an image of a map legend appropriate to the enclosing Style.', max_length=4096)),
                ('height', models.IntegerField(editable=False, help_text='the size of the image in pixels')),
                ('width', models.IntegerField(editable=False, help_text='the size of the image in pixels')),
            ],
        ),
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('identifier', models.CharField(max_length=255, unique=True)),
                ('symbol_url', models.URLField(null=True)),
                ('description', models.TextField()),
                ('description_url', models.URLField(null=True)),
                ('is_open_data', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MapContext',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='a short descriptive title for this map context', max_length=1000, verbose_name='title')),
                ('language', models.CharField(choices=[('de', 'de'), ('en', 'en')], default='en', help_text='language of context document', max_length=4, verbose_name='language')),
                ('abstract', models.TextField(blank=True, help_text='brief summary of the topic of this map context', null=True, verbose_name='abstract')),
                ('pixel_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='pixel width')),
                ('pixel_height', models.PositiveIntegerField(blank=True, null=True)),
                ('mm_per_pixel', models.FloatField(blank=True, null=True)),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='MapContextLayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer_scale_min', models.FloatField(blank=True, help_text='minimum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale minimum value')),
                ('layer_scale_max', models.FloatField(blank=True, help_text='maximum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale maximum value')),
                ('preview_image', models.ImageField(blank=True, help_text='A preview image for the Map Context Layer', null=True, upload_to=registry.models.mapcontext.preview_image_file_path, verbose_name='preview image')),
                ('rendering_active', models.BooleanField(blank=True, default=True, help_text='should this offering be visible?', verbose_name='rendering active')),
                ('selection_active', models.BooleanField(blank=True, default=True, help_text='should this offering be visible?', verbose_name='rendering active')),
                ('title', models.CharField(help_text='an identifying name for this map context layer', max_length=1000, verbose_name='title')),
                ('description', models.CharField(blank=True, help_text='a short description for this map context layer', max_length=1000, null=True, verbose_name='description')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MetadataContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='The name of the organization', max_length=256, verbose_name='Name')),
                ('person_name', models.CharField(default='', max_length=200, verbose_name='Contact person')),
                ('email', models.EmailField(default='', max_length=100, verbose_name='E-Mail')),
                ('phone', models.CharField(default='', max_length=100, verbose_name='Phone')),
                ('facsimile', models.CharField(default='', max_length=100, verbose_name='Facsimile')),
                ('city', models.CharField(default='', max_length=100, verbose_name='City')),
                ('postal_code', models.CharField(default='', max_length=100, verbose_name='Postal code')),
                ('address_type', models.CharField(default='', max_length=100, verbose_name='Address type')),
                ('address', models.CharField(default='', max_length=100, verbose_name='Address')),
                ('state_or_province', models.CharField(default='', max_length=100, verbose_name='State or province')),
                ('country', models.CharField(default='', max_length=100, verbose_name='Country')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MetadataRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_internal', models.BooleanField(default=False, help_text='true means that this relation is created by a user and the dataset is maybe not linked in a capabilities document for example.', verbose_name='internal relation?')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], help_text='determines where this relation was found or it is added by a user.', max_length=20, verbose_name='origin')),
            ],
        ),
        migrations.CreateModel(
            name='MimeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mime_type', models.CharField(db_index=True, help_text='The Internet Media Type', max_length=500, unique=True, verbose_name='mime type')),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100)),
                ('prefix', models.CharField(choices=[('EPSG', 'Epsg')], default='EPSG', max_length=255)),
            ],
            options={
                'ordering': ['-code'],
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('field_name', models.TextField(choices=[('title', 'Title'), ('abstract', 'Abstract'), ('access_constraints', 'Access Constraints'), ('keywords', 'Keywords'), ('formats', 'Formats'), ('reference_system', 'Reference System')])),
                ('property', models.TextField(choices=[('len', 'Len'), ('count', 'Count')])),
                ('operator', models.TextField(choices=[('>', 'Gt'), ('>=', 'Gte'), ('<', 'Lt'), ('<=', 'Lte'), ('==', 'Eq'), ('!=', 'Neq')])),
                ('threshold', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='WebFeatureService',
            fields=[
                ('xml_backup_file', models.FileField(editable=False, help_text='the original xml as backup to restore the xml field.', upload_to=registry.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('version', models.CharField(choices=[('1.0.0', 'V 1 0 0'), ('1.1.0', 'V 1 1 0'), ('1.1.1', 'V 1 1 1'), ('1.3.0', 'V 1 3 0'), ('2.0.0', 'V 2 0 0'), ('2.0.2', 'V 2 0 2')], editable=False, help_text='the version of the service type as sem version', max_length=10, verbose_name='version')),
                ('service_url', models.URLField(editable=False, help_text='the base url of the service', max_length=4096, verbose_name='url')),
                ('keywords', models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords')),
                ('licence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='registry.licence')),
                ('metadata_contact', models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='metadata contact')),
                ('service_contact', models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='service contact')),
            ],
            options={
                'verbose_name': 'web feature service',
                'verbose_name_plural': 'web feature services',
            },
            bases=(extras.models.HistoricalRecordMixin, models.Model),
            managers=[
                ('capabilities', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WebFeatureServiceHttpRequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('elapsed', models.DurationField()),
                ('method', models.CharField(max_length=20)),
                ('url', models.URLField(max_length=4096)),
                ('body', models.FileField(max_length=1024, upload_to=registry.models.security.request_body_path)),
                ('headers', models.JSONField(default=dict)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='http_request_logs', related_query_name='http_request_log', to='registry.webfeatureservice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_http_request_logs', related_query_name='%(class)shttp_request_log', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebFeatureServiceOperation',
            fields=[
                ('operation', models.CharField(choices=[('GetFeature', 'Get Feature'), ('Transaction', 'Transaction')], max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='WebMapService',
            fields=[
                ('xml_backup_file', models.FileField(editable=False, help_text='the original xml as backup to restore the xml field.', upload_to=registry.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('version', models.CharField(choices=[('1.0.0', 'V 1 0 0'), ('1.1.0', 'V 1 1 0'), ('1.1.1', 'V 1 1 1'), ('1.3.0', 'V 1 3 0'), ('2.0.0', 'V 2 0 0'), ('2.0.2', 'V 2 0 2')], editable=False, help_text='the version of the service type as sem version', max_length=10, verbose_name='version')),
                ('service_url', models.URLField(editable=False, help_text='the base url of the service', max_length=4096, verbose_name='url')),
                ('keywords', models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords')),
                ('licence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='registry.licence')),
                ('metadata_contact', models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='metadata contact')),
                ('service_contact', models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='service contact')),
            ],
            options={
                'verbose_name': 'web map service',
                'verbose_name_plural': 'web map services',
            },
            bases=(extras.models.HistoricalRecordMixin, models.Model),
            managers=[
                ('capabilities', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WebMapServiceHttpRequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('elapsed', models.DurationField()),
                ('method', models.CharField(max_length=20)),
                ('url', models.URLField(max_length=4096)),
                ('body', models.FileField(max_length=1024, upload_to=registry.models.security.request_body_path)),
                ('headers', models.JSONField(default=dict)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='http_request_logs', related_query_name='http_request_log', to='registry.webmapservice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_http_request_logs', related_query_name='%(class)shttp_request_log', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebMapServiceOperation',
            fields=[
                ('operation', models.CharField(choices=[('GetMap', 'Get Map'), ('GetFeatureInfo', 'Get Feature Info')], max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ConformityCheckConfigurationExternal',
            fields=[
                ('conformitycheckconfiguration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registry.conformitycheckconfiguration')),
                ('external_url', models.URLField(max_length=1000, null=True)),
                ('parameter_map', models.JSONField()),
                ('polling_interval_seconds', models.IntegerField(blank=True, default=5)),
                ('polling_interval_seconds_max', models.IntegerField(blank=True, default=300)),
            ],
            bases=('registry.conformitycheckconfiguration',),
        ),
        migrations.CreateModel(
            name='ConformityCheckConfigurationInternal',
            fields=[
                ('conformitycheckconfiguration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registry.conformitycheckconfiguration')),
            ],
            bases=('registry.conformitycheckconfiguration',),
        ),
        migrations.CreateModel(
            name='WebFeatureServiceAnalyzedResponseLog',
            fields=[
                ('analyzedresponselog_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registry.analyzedresponselog')),
            ],
            bases=('registry.analyzedresponselog',),
        ),
        migrations.CreateModel(
            name='WebMapServiceAnalyzedResponseLog',
            fields=[
                ('analyzedresponselog_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registry.analyzedresponselog')),
            ],
            bases=('registry.analyzedresponselog',),
        ),
        migrations.CreateModel(
            name='WMSGetCapabilitiesResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.IntegerField(default=0, editable=False, help_text='The http status code of the response', verbose_name='HTTP status code')),
                ('error_msg', models.TextField(blank=True, editable=False, help_text='The error message of the http response or other error description', null=True, verbose_name='error message')),
                ('monitored_uri', models.URLField(editable=False, help_text='This is the url which was monitored', max_length=4096, verbose_name='monitored uri')),
                ('request_duration', models.DurationField(blank=True, editable=False, help_text='elapsed time of the request', null=True, verbose_name='request duration')),
                ('needs_update', models.BooleanField(default=False, editable=False, help_text='signals if the ogc capabilities document has any changes', verbose_name='needs update')),
                ('service', models.ForeignKey(help_text='this is the service which shall be monitored', on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_results', related_query_name='monitoring_result', to='registry.webmapservice', verbose_name='web map service')),
                ('task_result', models.OneToOneField(editable=False, help_text='The result of the celery task', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_monitoring_results', related_query_name='%(class)s_monitoring_result', to='django_celery_results.taskresult', verbose_name='Task Result')),
            ],
            options={
                'ordering': ['-task_result__date_done'],
                'get_latest_by': 'task_result__date_done',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WmsConformityCheckRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField(blank=True, null=True)),
                ('report', models.TextField(blank=True, null=True)),
                ('report_type', models.TextField(choices=[('text/html', 'Html'), ('application/json', 'Json')])),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.conformitycheckconfiguration')),
                ('service', models.ForeignKey(help_text='the service targeted by this check', on_delete=django.db.models.deletion.CASCADE, to='registry.webmapservice', verbose_name='service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebMapServiceRemoteMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(help_text='the url where the metadata could be downloaded from.', max_length=4094, verbose_name='download link')),
                ('remote_content', models.TextField(help_text='the fetched content of the download url.', null=True, verbose_name='remote content')),
                ('object_id', models.UUIDField(help_text='the uuid of the described service, layer or feature type', verbose_name='described resource')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('service', models.ForeignKey(help_text='the service where this remote metadata is related to. This remote metadata was found in the GetCapabilites document of the related service.', on_delete=django.db.models.deletion.CASCADE, related_name='remote_metadata', related_query_name='remote_metadata', to='registry.webmapservice', verbose_name='web map service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebMapServiceProxySetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camouflage', models.BooleanField(default=False, help_text='if true, all related xml documents are secured, by replace all hostname/internet addresses of the related service by the hostname of the current mr. map instance.', verbose_name='camouflage')),
                ('log_response', models.BooleanField(default=False, help_text='if true, all responses of the related service will be logged.', verbose_name='log response')),
                ('secured_service', models.OneToOneField(help_text='the security proxy settings for this service.', on_delete=django.db.models.deletion.CASCADE, related_name='proxy_setting', related_query_name='proxy_setting', to='registry.webmapservice', verbose_name='proxy settings')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebMapServiceOperationUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('Get', 'Get'), ('Post', 'Post')], help_text='the http method you can perform for this url', max_length=10, verbose_name='http method')),
                ('url', models.URLField(editable=False, help_text='the url for this operation', max_length=4096, verbose_name='url')),
                ('operation', models.CharField(choices=[('GetCapabilities', 'Get Capabilities'), ('GetMap', 'Get Map'), ('GetFeatureInfo', 'Get Feature Info'), ('DescribeLayer', 'Describe Layer'), ('GetLegendGraphic', 'Get Legend Graphic'), ('GetStyles', 'Get Styles'), ('PutStyles', 'Put Styles'), ('GetFeature', 'Get Feature'), ('Transaction', 'Transaction'), ('LockFeature', 'Lock Feature'), ('DescribeFeatureType', 'Describe Feature Type'), ('GetFeatureWithLock', 'Get Feature With Lock'), ('GetGmlObject', 'Get Gml Object'), ('ListStoredQueries', 'List Stored Queries'), ('GetPropertyValue', 'Get Property Value'), ('DescribeStoredQueries', 'Describe Stored Queries'), ('GetRecords', 'Get Records'), ('DescribeRecord', 'Describe Record'), ('GetRecordById', 'Get Record By Id')], editable=False, help_text='the operation you can perform with this url.', max_length=30, verbose_name='operation')),
                ('mime_types', models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='%(class)s_operation_urls', related_query_name='%(class)s_operation_url', to='registry.mimetype', verbose_name='internet mime type')),
                ('service', models.ForeignKey(editable=False, help_text='the web map service for that this url can be used for.', on_delete=django.db.models.deletion.CASCADE, related_name='operation_urls', related_query_name='operation_url', to='registry.webmapservice', verbose_name='related web map service')),
            ],
        ),
        migrations.CreateModel(
            name='WebMapServiceHttpResponseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.IntegerField(default=0)),
                ('reason', models.CharField(max_length=50)),
                ('elapsed', models.DurationField()),
                ('headers', models.JSONField(default=dict)),
                ('url', models.URLField(max_length=4096)),
                ('content', models.FileField(max_length=1024, upload_to=registry.models.security.response_content_path)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='response', related_query_name='response', to='registry.webmapservicehttprequestlog')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebMapServiceAuthentication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='the username used for the authentication.', max_length=255, verbose_name='username')),
                ('password', models.CharField(help_text='the password used for the authentication.', max_length=500, verbose_name='password')),
                ('auth_type', models.CharField(choices=[('http_basic', 'Basic'), ('http_digest', 'Digest')], help_text='kind of authentication mechanism shall used.', max_length=100, verbose_name='authentication type')),
                ('key_file', models.FileField(editable=False, max_length=1024, upload_to=registry.models.security.key_file_path)),
                ('service', models.OneToOneField(blank=True, help_text='the optional authentication type and credentials to request the service.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auth', related_query_name='auth', to='registry.webmapservice', verbose_name='web map service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebFeatureServiceRemoteMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(help_text='the url where the metadata could be downloaded from.', max_length=4094, verbose_name='download link')),
                ('remote_content', models.TextField(help_text='the fetched content of the download url.', null=True, verbose_name='remote content')),
                ('object_id', models.UUIDField(help_text='the uuid of the described service, layer or feature type', verbose_name='described resource')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('service', models.ForeignKey(help_text='the service where this remote metadata is related to. This remote metadata was found in the GetCapabilites document of the related service.', on_delete=django.db.models.deletion.CASCADE, related_name='remote_metadata', related_query_name='remote_metadata', to='registry.webfeatureservice', verbose_name='web map service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebFeatureServiceProxySetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camouflage', models.BooleanField(default=False, help_text='if true, all related xml documents are secured, by replace all hostname/internet addresses of the related service by the hostname of the current mr. map instance.', verbose_name='camouflage')),
                ('log_response', models.BooleanField(default=False, help_text='if true, all responses of the related service will be logged.', verbose_name='log response')),
                ('secured_service', models.OneToOneField(help_text='the security proxy settings for this service.', on_delete=django.db.models.deletion.CASCADE, related_name='proxy_setting', related_query_name='proxy_setting', to='registry.webfeatureservice', verbose_name='proxy settings')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebFeatureServiceOperationUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('Get', 'Get'), ('Post', 'Post')], help_text='the http method you can perform for this url', max_length=10, verbose_name='http method')),
                ('url', models.URLField(editable=False, help_text='the url for this operation', max_length=4096, verbose_name='url')),
                ('operation', models.CharField(choices=[('GetCapabilities', 'Get Capabilities'), ('GetMap', 'Get Map'), ('GetFeatureInfo', 'Get Feature Info'), ('DescribeLayer', 'Describe Layer'), ('GetLegendGraphic', 'Get Legend Graphic'), ('GetStyles', 'Get Styles'), ('PutStyles', 'Put Styles'), ('GetFeature', 'Get Feature'), ('Transaction', 'Transaction'), ('LockFeature', 'Lock Feature'), ('DescribeFeatureType', 'Describe Feature Type'), ('GetFeatureWithLock', 'Get Feature With Lock'), ('GetGmlObject', 'Get Gml Object'), ('ListStoredQueries', 'List Stored Queries'), ('GetPropertyValue', 'Get Property Value'), ('DescribeStoredQueries', 'Describe Stored Queries'), ('GetRecords', 'Get Records'), ('DescribeRecord', 'Describe Record'), ('GetRecordById', 'Get Record By Id')], editable=False, help_text='the operation you can perform with this url.', max_length=30, verbose_name='operation')),
                ('mime_types', models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='%(class)s_operation_urls', related_query_name='%(class)s_operation_url', to='registry.mimetype', verbose_name='internet mime type')),
                ('service', models.ForeignKey(editable=False, help_text='the web feature service for that this url can be used for.', on_delete=django.db.models.deletion.CASCADE, related_name='operation_urls', related_query_name='operation_url', to='registry.webfeatureservice', verbose_name='related web feature service')),
            ],
        ),
        migrations.CreateModel(
            name='WebFeatureServiceHttpResponseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.IntegerField(default=0)),
                ('reason', models.CharField(max_length=50)),
                ('elapsed', models.DurationField()),
                ('headers', models.JSONField(default=dict)),
                ('url', models.URLField(max_length=4096)),
                ('content', models.FileField(max_length=1024, upload_to=registry.models.security.response_content_path)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='response', related_query_name='response', to='registry.webfeatureservicehttprequestlog')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebFeatureServiceAuthentication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='the username used for the authentication.', max_length=255, verbose_name='username')),
                ('password', models.CharField(help_text='the password used for the authentication.', max_length=500, verbose_name='password')),
                ('auth_type', models.CharField(choices=[('http_basic', 'Basic'), ('http_digest', 'Digest')], help_text='kind of authentication mechanism shall used.', max_length=100, verbose_name='authentication type')),
                ('key_file', models.FileField(editable=False, max_length=1024, upload_to=registry.models.security.key_file_path)),
                ('service', models.OneToOneField(blank=True, help_text='the optional authentication type and credentials to request the service.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auth', related_query_name='auth', to='registry.webfeatureservice', verbose_name='web feature service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeExtent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('stop', models.DateTimeField()),
                ('resolution', models.DurationField(null=True)),
                ('dimension', models.ForeignKey(help_text='the related dimension where this interval was found.', on_delete=django.db.models.deletion.CASCADE, related_name='time_extents', related_query_name='time_extent', to='registry.dimension', verbose_name='related dimension')),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryMdMetadataFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('md_metadata_file', models.FileField(help_text='the content of the http response, or of the imported file', upload_to=registry.models.harvest.response_file_path, verbose_name='response')),
                ('re_schedule', models.BooleanField(default=False, help_text='to re run to db task')),
                ('job', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.harvestingjob', verbose_name='harvesting job')),
            ],
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, help_text="The style's Name is used in the Map request STYLES parameter to lookup the style on server side.", max_length=255, verbose_name='name')),
                ('title', models.CharField(editable=False, help_text='The Title is a human-readable string as an alternative for the name attribute.', max_length=255, verbose_name='title')),
                ('layer', models.ForeignKey(editable=False, help_text='the layer for that this style is for.', on_delete=django.db.models.deletion.CASCADE, related_name='styles', related_query_name='style', to='registry.layer', verbose_name='related layer')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceMetadataRecord',
            fields=[
                ('xml_backup_file', models.FileField(editable=False, help_text='the original xml as backup to restore the xml field.', upload_to=registry.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('File System Import', 'File System Import'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('insufficient_quality', models.TextField(blank=True, help_text='TODO', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('bounding_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('inspire_interoperability', models.BooleanField(default=False, help_text='flag to signal if this ')),
                ('spatial_res_type', models.CharField(choices=[('groundDistance', 'Ground Distance'), ('scaleDenominator', 'Scale Distance')], default='', help_text='Ground resolution in meter or the equivalent scale.', max_length=20, verbose_name='resolution type')),
                ('spatial_res_value', models.FloatField(blank=True, help_text='The value depending on the selected resolution type.', null=True, verbose_name='resolution value')),
                ('harvested_through', models.ManyToManyField(blank=True, editable=False, help_text='all services from which this dataset was harvested.', related_name='%(app_label)s_%(class)s_metadata_records', related_query_name='%(app_label)s_%(class)s_metadata_record', to='registry.catalogueservice', verbose_name='services')),
                ('keywords', models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords')),
                ('licence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='registry.licence')),
                ('metadata_contact', models.ForeignKey(help_text='this is the contact which is responsible for the metadata information of the dataset.', on_delete=django.db.models.deletion.RESTRICT, related_name='%(class)s_metadata_contact', related_query_name='%(class)s_metadata_contact', to='registry.metadatacontact', verbose_name='contact')),
                ('reference_systems', models.ManyToManyField(blank=True, related_name='%(class)s', related_query_name='%(class)s', to='registry.referencesystem', verbose_name='reference systems')),
                ('self_pointing_csw', models.ManyToManyField(blank=True, editable=False, help_text='all csw which are linking to this service metadata in there capabilities.', related_name='%(app_label)s_%(class)s_service_metadata', related_query_name='%(app_label)s_%(class)s_service_metadata', through='registry.MetadataRelation', to='registry.catalogueservice', verbose_name='catalogue services')),
                ('self_pointing_feature_types', models.ManyToManyField(blank=True, editable=False, help_text='all feature types which are linking to this dataset metadata in there capabilities.', related_name='%(app_label)s_%(class)s_metadata_records', related_query_name='%(app_label)s_%(class)s_metadata_record', through='registry.MetadataRelation', to='registry.featuretype', verbose_name='feature types')),
                ('self_pointing_layers', models.ManyToManyField(blank=True, editable=False, help_text='all layers which are linking to this dataset metadata in there capabilities.', related_name='%(app_label)s_%(class)s_metadata_records', related_query_name='%(app_label)s_%(class)s_metadata_record', through='registry.MetadataRelation', to='registry.layer', verbose_name='layers')),
                ('self_pointing_wfs', models.ManyToManyField(blank=True, editable=False, help_text='all wfs which are linking to this service metadata in there capabilities.', related_name='%(app_label)s_%(class)s_service_metadata', related_query_name='%(app_label)s_%(class)s_service_metadata', through='registry.MetadataRelation', to='registry.webfeatureservice', verbose_name='web feature services')),
                ('self_pointing_wms', models.ManyToManyField(blank=True, editable=False, help_text='all wms which are linking to this service metadata in there capabilities.', related_name='%(app_label)s_%(class)s_service_metadata', related_query_name='%(app_label)s_%(class)s_service_metadata', through='registry.MetadataRelation', to='registry.webmapservice', verbose_name='web map services')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RuleSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('rules', models.ManyToManyField(related_name='rule_set', to='registry.rule')),
            ],
        ),
        migrations.AddConstraint(
            model_name='referencesystem',
            constraint=models.UniqueConstraint(fields=('code', 'prefix'), name='registry_referencesystem_unique_code_prefix'),
        ),
        migrations.AddField(
            model_name='metadatarelation',
            name='csw',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metadata_relations', related_query_name='metadata_relation', to='registry.catalogueservice'),
        ),
        migrations.AddField(
            model_name='metadatarelation',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_relations', related_query_name='resource_relation', to='registry.datasetmetadatarecord'),
        ),
        migrations.AddField(
            model_name='metadatarelation',
            name='feature_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metadata_relations', related_query_name='metadata_relation', to='registry.featuretype'),
        ),
        migrations.AddField(
            model_name='metadatarelation',
            name='layer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metadata_relations', related_query_name='metadata_relation', to='registry.layer'),
        ),
        migrations.AddField(
            model_name='metadatarelation',
            name='service_metadata',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_relations', related_query_name='resource_relation', to='registry.servicemetadatarecord'),
        ),
        migrations.AddField(
            model_name='metadatarelation',
            name='wfs',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metadata_relations', related_query_name='metadata_relation', to='registry.webfeatureservice'),
        ),
        migrations.AddField(
            model_name='metadatarelation',
            name='wms',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metadata_relations', related_query_name='metadata_relation', to='registry.webmapservice'),
        ),
        migrations.AddConstraint(
            model_name='metadatacontact',
            constraint=models.UniqueConstraint(fields=('name', 'person_name', 'email', 'phone', 'facsimile', 'city', 'postal_code', 'address_type', 'address', 'state_or_province', 'country'), name='registry_metadatacontact_unique_together_metadata_contact'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, help_text='You can use this field to pre filter possible Layer selection.', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.datasetmetadatarecord', verbose_name='Dataset Metadata'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='layer_style',
            field=models.ForeignKey(blank=True, help_text='Select a style for rendering.', null=True, on_delete=django.db.models.deletion.PROTECT, to='registry.style', verbose_name='Style'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='map_context',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_context_layers', related_query_name='map_context_layer', to='registry.mapcontext'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_layers', related_query_name='child_layer', to='registry.mapcontextlayer'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='rendering_layer',
            field=models.ForeignKey(blank=True, help_text='Select a layer for rendering.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='mapcontextlayers_rendering', to='registry.layer', verbose_name='Rendering layer'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='selection_layer',
            field=models.ForeignKey(blank=True, help_text='Select a layer for feature selection.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='mapcontextlayers_selection', to='registry.layer', verbose_name='Selection layer'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='mime_type',
            field=models.ForeignKey(editable=False, help_text='the mime type of the remote legend url', on_delete=django.db.models.deletion.RESTRICT, related_name='legend_urls', related_query_name='legend_url', to='registry.mimetype', verbose_name='internet mime type'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='style',
            field=models.OneToOneField(editable=False, help_text='the style entity which is linked to this legend url', on_delete=django.db.models.deletion.CASCADE, related_name='legend_url', related_query_name='legend_url', to='registry.style', verbose_name='related style'),
        ),
        migrations.AddField(
            model_name='layergetmapresult',
            name='layer',
            field=models.ForeignKey(help_text='this is the layer which shall be monitored', on_delete=django.db.models.deletion.CASCADE, related_name='get_map_monitoring_results', related_query_name='get_map_monitoring_result', to='registry.layer', verbose_name='layer'),
        ),
        migrations.AddField(
            model_name='layergetmapresult',
            name='task_result',
            field=models.OneToOneField(editable=False, help_text='The result of the celery task', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_monitoring_results', related_query_name='%(class)s_monitoring_result', to='django_celery_results.taskresult', verbose_name='Task Result'),
        ),
        migrations.AddField(
            model_name='layergetfeatureinforesult',
            name='layer',
            field=models.ForeignKey(help_text='this is the layer which shall be monitored', on_delete=django.db.models.deletion.CASCADE, related_name='get_feature_info_monitoring_results', related_query_name='get_feature_info_monitoring_result', to='registry.layer', verbose_name='layer'),
        ),
        migrations.AddField(
            model_name='layergetfeatureinforesult',
            name='task_result',
            field=models.OneToOneField(editable=False, help_text='The result of the celery task', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_monitoring_results', related_query_name='%(class)s_monitoring_result', to='django_celery_results.taskresult', verbose_name='Task Result'),
        ),
        migrations.AddField(
            model_name='layerconformitycheckrun',
            name='config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.conformitycheckconfiguration'),
        ),
        migrations.AddField(
            model_name='layerconformitycheckrun',
            name='layer',
            field=models.ForeignKey(blank=True, help_text='the layer targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.layer', verbose_name='layer'),
        ),
        migrations.AddField(
            model_name='layer',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='layer',
            name='parent',
            field=mptt.fields.TreeForeignKey(editable=False, help_text='the ancestor of this layer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', related_query_name='child', to='registry.layer', verbose_name='parent layer'),
        ),
        migrations.AddField(
            model_name='layer',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='%(class)s', related_query_name='%(class)s', to='registry.referencesystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='layer',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the extras service where this element is part of', on_delete=django.db.models.deletion.CASCADE, related_name='layers', related_query_name='layer', to='registry.webmapservice', verbose_name='service'),
        ),
        migrations.AddIndex(
            model_name='keyword',
            index=models.Index(fields=['keyword'], name='registry_ke_keyword_86359a_idx'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.UniqueConstraint(fields=('keyword',), name='registry_keyword_unique_keywords'),
        ),
        migrations.AddField(
            model_name='historicalwebmapservice',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.webmapservice'),
        ),
        migrations.AddField(
            model_name='historicalwebmapservice',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalwebmapservice',
            name='licence',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.licence'),
        ),
        migrations.AddField(
            model_name='historicalwebmapservice',
            name='metadata_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This is the contact for the metadata information.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AddField(
            model_name='historicalwebmapservice',
            name='service_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This is the contact for the service provider.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AddField(
            model_name='historicalwebfeatureservice',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.webfeatureservice'),
        ),
        migrations.AddField(
            model_name='historicalwebfeatureservice',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalwebfeatureservice',
            name='licence',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.licence'),
        ),
        migrations.AddField(
            model_name='historicalwebfeatureservice',
            name='metadata_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This is the contact for the metadata information.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AddField(
            model_name='historicalwebfeatureservice',
            name='service_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This is the contact for the service provider.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AddField(
            model_name='historicalservicemetadatarecord',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.servicemetadatarecord'),
        ),
        migrations.AddField(
            model_name='historicalservicemetadatarecord',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalservicemetadatarecord',
            name='licence',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.licence'),
        ),
        migrations.AddField(
            model_name='historicalservicemetadatarecord',
            name='metadata_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='this is the contact which is responsible for the metadata information of the dataset.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='%(class)s_metadata_contact', to='registry.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='You can use this field to pre filter possible Layer selection.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.datasetmetadatarecord', verbose_name='Dataset Metadata'),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.mapcontextlayer'),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='layer_style',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Select a style for rendering.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.style', verbose_name='Style'),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='map_context',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='map_context_layer', to='registry.mapcontext'),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='child_layer', to='registry.mapcontextlayer'),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='rendering_layer',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Select a layer for rendering.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.layer', verbose_name='Rendering layer'),
        ),
        migrations.AddField(
            model_name='historicalmapcontextlayer',
            name='selection_layer',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Select a layer for feature selection.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.layer', verbose_name='Selection layer'),
        ),
        migrations.AddField(
            model_name='historicalmapcontext',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.mapcontext'),
        ),
        migrations.AddField(
            model_name='historicalmapcontext',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicallayer',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.layer'),
        ),
        migrations.AddField(
            model_name='historicallayer',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicallayer',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, db_constraint=False, editable=False, help_text='the ancestor of this layer.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='child', to='registry.layer', verbose_name='parent layer'),
        ),
        migrations.AddField(
            model_name='historicallayer',
            name='service',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, help_text='the extras service where this element is part of', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='layer', to='registry.webmapservice', verbose_name='service'),
        ),
        migrations.AddField(
            model_name='historicalfeaturetype',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.featuretype'),
        ),
        migrations.AddField(
            model_name='historicalfeaturetype',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalfeaturetype',
            name='service',
            field=models.ForeignKey(blank=True, db_constraint=False, editable=False, help_text='the extras service where this element is part of', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='featuretype', to='registry.webfeatureservice', verbose_name='service'),
        ),
        migrations.AddField(
            model_name='historicaldatasetmetadatarecord',
            name='dataset_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='this is the contact which provides this dataset.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='%(class)s_dataset_contact', to='registry.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='historicaldatasetmetadatarecord',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.datasetmetadatarecord'),
        ),
        migrations.AddField(
            model_name='historicaldatasetmetadatarecord',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldatasetmetadatarecord',
            name='licence',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.licence'),
        ),
        migrations.AddField(
            model_name='historicaldatasetmetadatarecord',
            name='metadata_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='this is the contact which is responsible for the metadata information of the dataset.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='%(class)s_metadata_contact', to='registry.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='historicalcatalogueservice',
            name='history_relation',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='change_logs', to='registry.catalogueservice'),
        ),
        migrations.AddField(
            model_name='historicalcatalogueservice',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalcatalogueservice',
            name='licence',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.licence'),
        ),
        migrations.AddField(
            model_name='historicalcatalogueservice',
            name='metadata_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This is the contact for the metadata information.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AddField(
            model_name='historicalcatalogueservice',
            name='service_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This is the contact for the service provider.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='existing_dataset_records',
            field=models.ManyToManyField(editable=False, related_name='ignored_by', to='registry.datasetmetadatarecord'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='existing_service_records',
            field=models.ManyToManyField(editable=False, related_name='ignored_by', to='registry.servicemetadatarecord'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='new_dataset_records',
            field=models.ManyToManyField(editable=False, related_name='harvested_by', to='registry.datasetmetadatarecord'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='new_service_records',
            field=models.ManyToManyField(editable=False, related_name='harvested_by', to='registry.servicemetadatarecord'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='service',
            field=models.ForeignKey(help_text='the csw for that this job is running', on_delete=django.db.models.deletion.CASCADE, to='registry.catalogueservice', verbose_name='service'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='updated_dataset_records',
            field=models.ManyToManyField(editable=False, related_name='updated_by', to='registry.datasetmetadatarecord'),
        ),
        migrations.AddField(
            model_name='harvestingjob',
            name='updated_service_records',
            field=models.ManyToManyField(editable=False, related_name='updated_by', to='registry.servicemetadatarecord'),
        ),
        migrations.AddField(
            model_name='featuretypeproperty',
            name='feature_type',
            field=models.ForeignKey(editable=False, help_text='related feature type of this property', on_delete=django.db.models.deletion.CASCADE, related_name='properties', related_query_name='property', to='registry.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='featuretypeconformitycheckrun',
            name='config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.conformitycheckconfiguration'),
        ),
        migrations.AddField(
            model_name='featuretypeconformitycheckrun',
            name='feature_type',
            field=models.ForeignKey(blank=True, help_text='the feature type targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='output_formats',
            field=models.ManyToManyField(blank=True, editable=False, help_text='This is a list of MIME types indicating the output formats that may be generated for a feature type.  If this optional element is not specified, then all the result formats listed for the GetFeature operation are assumed to be supported. ', related_name='feature_types', related_query_name='feature_type', to='registry.mimetype', verbose_name='output formats'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='%(class)s', related_query_name='%(class)s', to='registry.referencesystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the extras service where this element is part of', on_delete=django.db.models.deletion.CASCADE, related_name='featuretypes', related_query_name='featuretype', to='registry.webfeatureservice', verbose_name='service'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, help_text='the related dataset metadata of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_dimensions', related_query_name='dataset_metadata_dimension', to='registry.datasetmetadatarecord', verbose_name='dataset metadata'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='feature_type',
            field=models.ForeignKey(blank=True, help_text='the related feature type of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feature_type_dimensions', related_query_name='feature_type_dimension', to='registry.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='layer',
            field=models.ForeignKey(blank=True, help_text='the related layer of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_dimensions', related_query_name='layer_dimension', to='registry.layer', verbose_name='layer'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='dataset_contact',
            field=models.ForeignKey(help_text='this is the contact which provides this dataset.', on_delete=django.db.models.deletion.RESTRICT, related_name='%(class)s_dataset_contact', related_query_name='%(class)s_dataset_contact', to='registry.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='harvested_through',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all services from which this dataset was harvested.', related_name='%(app_label)s_%(class)s_metadata_records', related_query_name='%(app_label)s_%(class)s_metadata_record', to='registry.catalogueservice', verbose_name='services'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='licence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='registry.licence'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='metadata_contact',
            field=models.ForeignKey(help_text='this is the contact which is responsible for the metadata information of the dataset.', on_delete=django.db.models.deletion.RESTRICT, related_name='%(class)s_metadata_contact', related_query_name='%(class)s_metadata_contact', to='registry.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, related_name='%(class)s', related_query_name='%(class)s', to='registry.referencesystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='self_pointing_feature_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all feature types which are linking to this dataset metadata in there capabilities.', related_name='%(app_label)s_%(class)s_metadata_records', related_query_name='%(app_label)s_%(class)s_metadata_record', through='registry.MetadataRelation', to='registry.featuretype', verbose_name='feature types'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarecord',
            name='self_pointing_layers',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all layers which are linking to this dataset metadata in there capabilities.', related_name='%(app_label)s_%(class)s_metadata_records', related_query_name='%(app_label)s_%(class)s_metadata_record', through='registry.MetadataRelation', to='registry.layer', verbose_name='layers'),
        ),
        migrations.AddField(
            model_name='datasetmetadataconformitycheckrun',
            name='config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.conformitycheckconfiguration'),
        ),
        migrations.AddField(
            model_name='datasetmetadataconformitycheckrun',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, help_text='the dataset metadata targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.datasetmetadatarecord', verbose_name='dataset metadata'),
        ),
        migrations.AddField(
            model_name='catalogueserviceoperationurl',
            name='mime_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='%(class)s_operation_urls', related_query_name='%(class)s_operation_url', to='registry.mimetype', verbose_name='internet mime type'),
        ),
        migrations.AddField(
            model_name='catalogueserviceoperationurl',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the catalogue service for that this url can be used for.', on_delete=django.db.models.deletion.CASCADE, related_name='operation_urls', related_query_name='operation_url', to='registry.catalogueservice', verbose_name='related catalogue service'),
        ),
        migrations.AddField(
            model_name='catalogueserviceauthentication',
            name='service',
            field=models.OneToOneField(blank=True, help_text='the optional authentication type and credentials to request the service.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auth', related_query_name='auth', to='registry.catalogueservice', verbose_name='web feature service'),
        ),
        migrations.AddField(
            model_name='catalogueservice',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='catalogueservice',
            name='licence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='registry.licence'),
        ),
        migrations.AddField(
            model_name='catalogueservice',
            name='metadata_contact',
            field=models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AddField(
            model_name='catalogueservice',
            name='service_contact',
            field=models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AddField(
            model_name='allowedwebmapserviceoperation',
            name='allowed_groups',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_allowed_operations', related_query_name='%(class)s_allowed_operation', to='auth.group'),
        ),
        migrations.AddField(
            model_name='allowedwebmapserviceoperation',
            name='operations',
            field=models.ManyToManyField(related_name='allowed_operations', related_query_name='allowed_operation', to='registry.webmapserviceoperation'),
        ),
        migrations.AddField(
            model_name='allowedwebmapserviceoperation',
            name='secured_layers',
            field=models.ManyToManyField(help_text='Select one or more layers. Note that all sub layers of a selected layer will also be secured.', related_name='allowed_operations', related_query_name='allowed_operation', to='registry.layer', verbose_name='secured layers'),
        ),
        migrations.AddField(
            model_name='allowedwebmapserviceoperation',
            name='secured_service',
            field=models.ForeignKey(help_text='the service where some layers or feature types are secured of.', on_delete=django.db.models.deletion.CASCADE, related_name='allowed_operations', related_query_name='allowed_operation', to='registry.webmapservice', verbose_name='secured service'),
        ),
        migrations.AddField(
            model_name='allowedwebfeatureserviceoperation',
            name='allowed_groups',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_allowed_operations', related_query_name='%(class)s_allowed_operation', to='auth.group'),
        ),
        migrations.AddField(
            model_name='allowedwebfeatureserviceoperation',
            name='operations',
            field=models.ManyToManyField(related_name='allowed_operations', related_query_name='allowed_operation', to='registry.webfeatureserviceoperation'),
        ),
        migrations.AddField(
            model_name='allowedwebfeatureserviceoperation',
            name='secured_feature_types',
            field=models.ManyToManyField(help_text='Select one or more feature types.', related_name='allowed_operations', related_query_name='allowed_operation', to='registry.featuretype', verbose_name='secured feature types'),
        ),
        migrations.AddField(
            model_name='allowedwebfeatureserviceoperation',
            name='secured_service',
            field=models.ForeignKey(help_text='the service where some layers or feature types are secured of.', on_delete=django.db.models.deletion.CASCADE, related_name='allowed_operations', related_query_name='allowed_operation', to='registry.webfeatureservice', verbose_name='secured service'),
        ),
        migrations.AddConstraint(
            model_name='webmapserviceproxysetting',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('camouflage', True), ('log_response', True)), models.Q(('camouflage', True), ('log_response', False)), models.Q(('camouflage', False), ('log_response', False)), _connector='OR'), name='registry_webmapserviceproxysetting_log_response_without_camouflage'),
        ),
        migrations.AddConstraint(
            model_name='webmapserviceoperationurl',
            constraint=models.UniqueConstraint(fields=('method', 'operation', 'service'), name='registry_webmapserviceoperationurl_unique_together_method_id_operation_service'),
        ),
        migrations.AddField(
            model_name='webmapserviceanalyzedresponselog',
            name='response',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='analyzed_response', related_query_name='analyzed_response', to='registry.webmapservicehttpresponselog'),
        ),
        migrations.AddConstraint(
            model_name='webfeatureserviceproxysetting',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('camouflage', True), ('log_response', True)), models.Q(('camouflage', True), ('log_response', False)), models.Q(('camouflage', False), ('log_response', False)), _connector='OR'), name='registry_webfeatureserviceproxysetting_log_response_without_camouflage'),
        ),
        migrations.AddConstraint(
            model_name='webfeatureserviceoperationurl',
            constraint=models.UniqueConstraint(fields=('method', 'operation', 'service'), name='registry_webfeatureserviceoperationurl_unique_together_method_id_operation_service'),
        ),
        migrations.AddField(
            model_name='webfeatureserviceanalyzedresponselog',
            name='response',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='analyzed_response', related_query_name='analyzed_response', to='registry.webfeatureservicehttpresponselog'),
        ),
        migrations.AddConstraint(
            model_name='servicemetadatarecord',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('spatial_res_type', ''), ('spatial_res_value', None)), models.Q(('spatial_res_type', 'groundDistance'), ('spatial_res_value__gte', 0)), models.Q(('spatial_res_type', 'scaleDenominator'), ('spatial_res_value__gte', 0)), _connector='OR'), name='check_spatial_res'),
        ),
        migrations.AddConstraint(
            model_name='metadatarelation',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', False), ('service_metadata__isnull', False), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', False), ('feature_type__isnull', True), ('layer__isnull', False), ('service_metadata__isnull', True), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', False), ('service_metadata__isnull', False), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', False), ('layer__isnull', True), ('service_metadata__isnull', True), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', False), ('feature_type__isnull', False), ('layer__isnull', True), ('service_metadata__isnull', True), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', False), ('layer__isnull', True), ('service_metadata__isnull', False), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', False), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', True), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', False), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', False), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', True), ('wfs__isnull', True), ('wms__isnull', False)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', False), ('wfs__isnull', True), ('wms__isnull', False)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', True), ('wfs__isnull', False), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', False), ('wfs__isnull', False), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', False), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', True), ('wfs__isnull', True), ('wms__isnull', True)), models.Q(('csw__isnull', True), ('dataset_metadata__isnull', True), ('feature_type__isnull', True), ('layer__isnull', True), ('service_metadata__isnull', False), ('wfs__isnull', True), ('wms__isnull', True)), _connector='OR'), name='one_related_object_selected'),
        ),
        migrations.AddConstraint(
            model_name='metadatarelation',
            constraint=models.UniqueConstraint(fields=('service_metadata', 'layer'), name='unique_service_metadata_representation_for_layer'),
        ),
        migrations.AddConstraint(
            model_name='metadatarelation',
            constraint=models.UniqueConstraint(fields=('service_metadata', 'feature_type'), name='unique_service_metadata_representation_for_feature_type'),
        ),
        migrations.AddConstraint(
            model_name='metadatarelation',
            constraint=models.UniqueConstraint(fields=('service_metadata', 'csw'), name='unique_service_metadata_representation_for_csw'),
        ),
        migrations.AddConstraint(
            model_name='metadatarelation',
            constraint=models.UniqueConstraint(fields=('service_metadata', 'wms'), name='unique_service_metadata_representation_for_wms'),
        ),
        migrations.AddConstraint(
            model_name='metadatarelation',
            constraint=models.UniqueConstraint(fields=('service_metadata', 'wfs'), name='unique_service_metadata_representation_for_wfs'),
        ),
        migrations.AlterIndexTogether(
            name='layer',
            index_together={('tree_id', 'lft', 'rght')},
        ),
        migrations.AddConstraint(
            model_name='harvestingjob',
            constraint=models.UniqueConstraint(fields=('service', 'done_at'), name='registry_harvestingjob_service_done_at_uniq'),
        ),
        migrations.AddConstraint(
            model_name='harvestingjob',
            constraint=models.UniqueConstraint(condition=models.Q(('done_at__isnull', True)), fields=('service',), name='registry_harvestingjob_service_uniq'),
        ),
        migrations.AddIndex(
            model_name='datasetmetadatarecord',
            index=models.Index(fields=['dataset_id', 'dataset_id_code_space'], name='registry_da_dataset_309eb0_idx'),
        ),
        migrations.AddConstraint(
            model_name='datasetmetadatarecord',
            constraint=models.UniqueConstraint(condition=models.Q(('dataset_id', ''), ('dataset_id_code_space', ''), _negated=True), fields=('dataset_id', 'dataset_id_code_space'), name='registry_datasetmetadatarecord_unique_together_dataset_id_dataset_id_code_space'),
        ),
        migrations.AddField(
            model_name='conformitycheckconfigurationinternal',
            name='mandatory_rule_sets',
            field=models.ManyToManyField(related_name='mandatory_rule_sets', to='registry.ruleset'),
        ),
        migrations.AddField(
            model_name='conformitycheckconfigurationinternal',
            name='optional_rule_sets',
            field=models.ManyToManyField(blank=True, related_name='optional_rule_sets', to='registry.ruleset'),
        ),
        migrations.AddConstraint(
            model_name='catalogueserviceoperationurl',
            constraint=models.UniqueConstraint(fields=('method', 'operation', 'service'), name='registry_catalogueserviceoperationurl_unique_together_method_id_operation_service'),
        ),
        migrations.AddConstraint(
            model_name='allowedwebmapserviceoperation',
            constraint=models.CheckConstraint(check=models.Func(models.F('allowed_area'), function='NOT st_isempty', output_field=models.BooleanField()), name='registry_allowedwebmapserviceoperation_allowed_area_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='allowedwebfeatureserviceoperation',
            constraint=models.CheckConstraint(check=models.Func(models.F('allowed_area'), function='NOT st_isempty', output_field=models.BooleanField()), name='registry_allowedwebfeatureserviceoperation_allowed_area_not_empty'),
        ),
    ]
