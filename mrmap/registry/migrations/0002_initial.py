# Generated by Django 3.2.7 on 2021-09-27 13:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jobs', '0002_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('users', '0001_initial'),
        ('django_celery_beat', '0015_edit_solarschedule_events_choices'),
        ('registry', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='timeextent',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_timeextent_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='timeextent',
            name='dimension',
            field=models.ForeignKey(help_text='the related dimension where this interval was found.', on_delete=django.db.models.deletion.CASCADE, related_name='time_extents', related_query_name='time_extent', to='registry.dimension', verbose_name='related dimension'),
        ),
        migrations.AddField(
            model_name='timeextent',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_timeextent_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='timeextent',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_timeextent_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='style',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_style_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='style',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_style_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='style',
            name='layer',
            field=models.ForeignKey(editable=False, help_text='the layer for that this style is for.', on_delete=django.db.models.deletion.CASCADE, related_name='styles', related_query_name='style', to='registry.layer', verbose_name='related layer'),
        ),
        migrations.AddField(
            model_name='style',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_style_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddConstraint(
            model_name='servicetype',
            constraint=models.UniqueConstraint(fields=('name', 'version'), name='registry_servicetype_unique_name_version'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_servicemetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='described_object',
            field=models.OneToOneField(editable=False, help_text='choice the service you want to describe with this metadata', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', related_query_name='metadata', to='registry.service', verbose_name='described service'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='servicemetadata_metadata', related_query_name='servicemetadata_metadata', to='registry.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_servicemetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='licence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='registry.licence'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='metadata_contact',
            field=models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_service_metadata', related_query_name='metadata_contact_service_metadata', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_servicemetadata_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='service_contact',
            field=models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_service_metadata', related_query_name='service_contact_service_metadata', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AddField(
            model_name='serviceaccessgroup',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_serviceaccessgroup_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='serviceaccessgroup',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_serviceaccessgroup_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='serviceaccessgroup',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_serviceaccessgroup_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='service',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_service_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='service',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_service_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='service',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_service_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_type',
            field=models.ForeignKey(editable=False, help_text='the concrete type and version of the service.', on_delete=django.db.models.deletion.PROTECT, related_name='services', related_query_name='service', to='registry.servicetype', verbose_name='service type'),
        ),
        migrations.AddField(
            model_name='ruleset',
            name='rules',
            field=models.ManyToManyField(related_name='rule_set', to='registry.Rule'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_remotemetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_remotemetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_remotemetadata_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='service',
            field=models.ForeignKey(help_text='the service where this remote metadata is related to. This remote metadata was found in the GetCapabilites document of the related service.', on_delete=django.db.models.deletion.CASCADE, related_name='remote_metadata', related_query_name='remote_metadata', to='registry.service', verbose_name='service'),
        ),
        migrations.AddConstraint(
            model_name='referencesystem',
            constraint=models.UniqueConstraint(fields=('code', 'prefix'), name='registry_referencesystem_unique_code_prefix'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_proxysetting_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_proxysetting_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_proxysetting_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='secured_service',
            field=models.OneToOneField(help_text='the configured service for this proxy settings', on_delete=django.db.models.deletion.CASCADE, related_name='proxy_setting', related_query_name='proxy_setting', to='registry.service', verbose_name='secured service'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_operationurl_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_operationurl_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='mime_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='operation_urls', related_query_name='operation_url', to='registry.MimeType', verbose_name='internet mime type'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_operationurl_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the service for that this url can be used for.', on_delete=django.db.models.deletion.CASCADE, related_name='operation_urls', related_query_name='operation_url', to='registry.service', verbose_name='related service'),
        ),
        migrations.AddField(
            model_name='monitoringsetting',
            name='metadatas',
            field=models.ManyToManyField(related_name='monitoring_setting', to='registry.Service'),
        ),
        migrations.AddField(
            model_name='monitoringsetting',
            name='periodic_task',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_celery_beat.periodictask'),
        ),
        migrations.AddField(
            model_name='monitoringrun',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_monitoringrun_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='monitoringrun',
            name='dataset_metadatas',
            field=models.ManyToManyField(blank=True, related_name='monitoring_runs', to='registry.DatasetMetadata', verbose_name='Checked dataset metadatas'),
        ),
        migrations.AddField(
            model_name='monitoringrun',
            name='feature_types',
            field=models.ManyToManyField(blank=True, related_name='monitoring_runs', to='registry.FeatureType', verbose_name='Checked feature types'),
        ),
        migrations.AddField(
            model_name='monitoringrun',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_monitoringrun_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='monitoringrun',
            name='layers',
            field=models.ManyToManyField(blank=True, related_name='monitoring_runs', to='registry.Layer', verbose_name='Checked layers'),
        ),
        migrations.AddField(
            model_name='monitoringrun',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_monitoringrun_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='monitoringrun',
            name='services',
            field=models.ManyToManyField(blank=True, related_name='monitoring_runs', to='registry.Service', verbose_name='Checked services'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_monitoringresult_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.datasetmetadata', verbose_name='Dataset Metadata'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='feature_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.featuretype', verbose_name='Feature Type'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_monitoringresult_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='layer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.layer', verbose_name='Layer'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='monitoring_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_results', to='registry.monitoringrun'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_monitoringresult_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='monitoringresult',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.service', verbose_name='Service'),
        ),
        migrations.AddConstraint(
            model_name='metadatacontact',
            constraint=models.UniqueConstraint(fields=('name', 'person_name', 'email', 'phone', 'facsimile', 'city', 'postal_code', 'address_type', 'address', 'state_or_province', 'country'), name='registry_metadatacontact_unique_metadata_contact'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='map_context',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.mapcontext'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_layers', to='registry.mapcontextlayer'),
        ),
        migrations.AddField(
            model_name='mapcontext',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_mapcontext_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='mapcontext',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_mapcontext_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='mapcontext',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_mapcontext_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_legendurl_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_legendurl_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='mime_type',
            field=models.ForeignKey(editable=False, help_text='the mime type of the remote legend url', on_delete=django.db.models.deletion.RESTRICT, related_name='legend_urls', related_query_name='legend_url', to='registry.mimetype', verbose_name='internet mime type'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_legendurl_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='style',
            field=models.OneToOneField(editable=False, help_text='the style entity which is linked to this legend url', on_delete=django.db.models.deletion.CASCADE, related_name='legend_url', related_query_name='legend_url', to='registry.style', verbose_name='related style'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_layermetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='described_object',
            field=models.OneToOneField(help_text='choice the layer you want to describe with this metadata', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', related_query_name='metadata', to='registry.layer', verbose_name='described layer'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='layermetadata_metadata', related_query_name='layermetadata_metadata', to='registry.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_layermetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_layermetadata_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='layer',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_layer_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='layer',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_layer_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='layer',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_layer_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='layer',
            name='parent',
            field=mptt.fields.TreeForeignKey(editable=False, help_text='the ancestor of this layer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', related_query_name='child', to='registry.layer', verbose_name='parent layer'),
        ),
        migrations.AddField(
            model_name='layer',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='layer', related_query_name='layer', to='registry.ReferenceSystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='layer',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the extras service where this element is part of', on_delete=django.db.models.deletion.CASCADE, related_name='layers', related_query_name='layer', to='registry.service', verbose_name='parent service'),
        ),
        migrations.AddField(
            model_name='httpresponselog',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='response', related_query_name='response', to='registry.httprequestlog'),
        ),
        migrations.AddField(
            model_name='httprequestlog',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='http_request_logs', related_query_name='http_request_log', to='registry.service'),
        ),
        migrations.AddField(
            model_name='httprequestlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='http_request_logs', related_query_name='http_request_log', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='healthstatereason',
            name='health_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reasons', to='registry.healthstate'),
        ),
        migrations.AddField(
            model_name='healthstatereason',
            name='monitoring_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_state_reasons', to='registry.monitoringresult'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_healthstate_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='health_states', related_query_name='health_states', to='registry.datasetmetadata', verbose_name='Dataset Metadata'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='feature_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='health_states', related_query_name='health_states', to='registry.featuretype', verbose_name='Feature Type'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_healthstate_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='layer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='health_states', related_query_name='health_states', to='registry.layer', verbose_name='Layer'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='monitoring_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_states', to='registry.monitoringrun', verbose_name='Monitoring Runs'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_healthstate_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='healthstate',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='health_states', related_query_name='health_states', to='registry.service', verbose_name='Service'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_harvestresult_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='harvest_results', related_query_name='harvest_result', to='jobs.job'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_harvestresult_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_harvestresult_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvest_results', related_query_name='harvest_result', to='registry.service'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretypemetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='described_object',
            field=models.OneToOneField(help_text='choice the feature type you want to describe with this metadata', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', related_query_name='metadata', to='registry.featuretype', verbose_name='described feature type'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='featuretypemetadata_metadata', related_query_name='featuretypemetadata_metadata', to='registry.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretypemetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretypemetadata_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretypeelement_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='feature_type',
            field=models.ForeignKey(help_text='related feature type of this element', on_delete=django.db.models.deletion.CASCADE, related_name='elements', related_query_name='element', to='registry.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretypeelement_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretypeelement_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretype_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretype_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='output_formats',
            field=models.ManyToManyField(blank=True, editable=False, help_text='This is a list of MIME types indicating the output formats that may be generated for a feature type.  If this optional element is not specified, then all the result formats listed for the GetFeature operation are assumed to be supported. ', related_name='feature_types', related_query_name='feature_type', to='registry.MimeType', verbose_name='output formats'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_featuretype_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='featuretype', related_query_name='featuretype', to='registry.ReferenceSystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the extras service where this element is part of', on_delete=django.db.models.deletion.CASCADE, related_name='featuretypes', related_query_name='featuretype', to='registry.service', verbose_name='parent service'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_externalauthentication_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_externalauthentication_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_externalauthentication_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='secured_service',
            field=models.OneToOneField(help_text='the service which uses this credentials.', on_delete=django.db.models.deletion.CASCADE, related_name='external_authentication', related_query_name='external_authentication', to='registry.service', verbose_name='secured service'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_dimension_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, help_text='the related dataset metadata of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_dimensions', related_query_name='dataset_metadata_dimension', to='registry.datasetmetadata', verbose_name='dataset metadata'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='feature_type',
            field=models.ForeignKey(blank=True, help_text='the related feature type of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feature_type_dimensions', related_query_name='feature_type_dimension', to='registry.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_dimension_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='layer',
            field=models.ForeignKey(blank=True, help_text='the related layer of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_dimensions', related_query_name='layer_dimension', to='registry.layer', verbose_name='layer'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_dimension_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_datasetmetadatarelation_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='dataset_metadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='registry.datasetmetadata'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='feature_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='registry.featuretype'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_datasetmetadatarelation_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='layer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='registry.layer'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_datasetmetadatarelation_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='registry.service'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_datasetmetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='dataset_contact',
            field=models.ForeignKey(help_text='this is the contact which provides this dataset.', on_delete=django.db.models.deletion.RESTRICT, related_name='dataset_contact_metadata', related_query_name='dataset_contact_metadata', to='registry.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='datasetmetadata_metadata', related_query_name='datasetmetadata_metadata', to='registry.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_datasetmetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='licence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='registry.licence'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='metadata_contact',
            field=models.ForeignKey(help_text='this is the contact which is responsible for the metadata information of the dataset.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_metadata', related_query_name='metadata_contact_metadata', to='registry.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_datasetmetadata_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, related_name='dataset_metadata', related_query_name='dataset_metadata', to='registry.ReferenceSystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='self_pointing_feature_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all feature types which are linking to this dataset metadata in there capabilities.', related_name='dataset_metadata', related_query_name='dataset_metadata', through='registry.DatasetMetadataRelation', to='registry.FeatureType', verbose_name='feature types'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='self_pointing_layers',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all layers which are linking to this dataset metadata in there capabilities.', related_name='dataset_metadata', related_query_name='dataset_metadata', through='registry.DatasetMetadataRelation', to='registry.Layer', verbose_name='layers'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='self_pointing_services',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all services from which this dataset was harvested.', related_name='dataset_metadata', related_query_name='dataset_metadata', through='registry.DatasetMetadataRelation', to='registry.Service', verbose_name='services'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.conformitycheckconfiguration'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_conformitycheckrun_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, help_text='the dataset metadata targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.datasetmetadata', verbose_name='dataset metadata'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='feature_type',
            field=models.ForeignKey(blank=True, help_text='the feature type targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='feature_type_metadata',
            field=models.ForeignKey(blank=True, help_text='the feature type metadata targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.featuretypemetadata', verbose_name='feature type metadata'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_conformitycheckrun_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='layer',
            field=models.ForeignKey(blank=True, help_text='the layer targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.layer', verbose_name='layer'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='layer_metadata',
            field=models.ForeignKey(blank=True, help_text='the layer metadata targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.layermetadata', verbose_name='layer metadata'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_conformitycheckrun_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='service',
            field=models.ForeignKey(blank=True, help_text='the service targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.service', verbose_name='service'),
        ),
        migrations.AddField(
            model_name='conformitycheckrun',
            name='service_metadata',
            field=models.ForeignKey(blank=True, help_text='the service metadata targeted by this check', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.servicemetadata', verbose_name='service metadata'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_analyzedresponselog_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_analyzedresponselog_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_analyzedresponselog_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='response',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='analyzed_response', related_query_name='analyzed_response', to='registry.httpresponselog'),
        ),
        migrations.AddField(
            model_name='allowedoperationgrouprelation',
            name='allowed_operation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.allowedoperation'),
        ),
        migrations.AddField(
            model_name='allowedoperationgrouprelation',
            name='service_access_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registry.serviceaccessgroup'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='allowed_groups',
            field=models.ManyToManyField(related_name='allowed_operations', related_query_name='allowed_operation', through='registry.AllowedOperationGroupRelation', to='registry.ServiceAccessGroup'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_allowedoperation_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_allowedoperation_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='operations',
            field=models.ManyToManyField(related_name='allowed_operations', related_query_name='allowed_operation', to='registry.OGCOperation'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registry_allowedoperation_owned_by_org', to='users.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='secured_feature_types',
            field=models.ManyToManyField(help_text='Select one or more feature types.', related_name='allowed_operations', related_query_name='allowed_operation', to='registry.FeatureType', verbose_name='secured feature types'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='secured_layers',
            field=models.ManyToManyField(help_text='Select one or more layers. Note that all sub layers of a selected layer will also be secured.', related_name='allowed_operations', related_query_name='allowed_operation', to='registry.Layer', verbose_name='secured layers'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='secured_service',
            field=models.ForeignKey(help_text='the service where some layers or feature types are secured of.', on_delete=django.db.models.deletion.CASCADE, related_name='allowed_operations', related_query_name='allowed_operation', to='registry.service', verbose_name='secured service'),
        ),
        migrations.AddConstraint(
            model_name='proxysetting',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('camouflage', True), ('log_response', True)), models.Q(('camouflage', True), ('log_response', False)), models.Q(('camouflage', False), ('log_response', False)), _connector='OR'), name='registry_proxysetting_log_response_without_camouflage'),
        ),
        migrations.AddConstraint(
            model_name='datasetmetadatarelation',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('service', False)), _negated=True)), name='registry_datasetmetadatarelation_one_related_object_selected'),
        ),
        migrations.AddConstraint(
            model_name='datasetmetadata',
            constraint=models.UniqueConstraint(fields=('dataset_id', 'dataset_id_code_space'), name='registry_datasetmetadata_unique_origin_url_file_identifier'),
        ),
        migrations.AddField(
            model_name='conformitycheckconfigurationinternal',
            name='mandatory_rule_sets',
            field=models.ManyToManyField(related_name='mandatory_rule_sets', to='registry.RuleSet'),
        ),
        migrations.AddField(
            model_name='conformitycheckconfigurationinternal',
            name='optional_rule_sets',
            field=models.ManyToManyField(blank=True, related_name='optional_rule_sets', to='registry.RuleSet'),
        ),
    ]
