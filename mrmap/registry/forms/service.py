from django import forms
from django.utils.translation import gettext_lazy as _
from MrMap.validators import validate_get_capablities_uri
from extras.forms import ModelForm
from registry.enums.service import AuthTypeEnum
from registry.models import Service, Layer, FeatureType
from structure.models import Organization
from django.core.exceptions import ValidationError


class RegisterServiceForm(forms.Form):
    test_url = forms.URLField(#validators=[validate_get_capablities_uri],
                              label=_("Service url"),
                              help_text=_("this shall be the full get capabilities request url."))
    collect_linked_metadata = forms.BooleanField(initial=True,
                                                 required=False,
                                                 label=_("collect metadata"),
                                                 help_text=_("auto start collecting task after successful registering "
                                                             "which register all linked metadata records found in the "
                                                             "GetCapabilities document."))
    registering_for_organization = forms.ModelChoiceField(
        label=_("Registration for organization"),
        help_text=_("Select for which organization you'd like to register the service."),
        queryset=Organization.objects.none(),
        to_field_name='id',
    )
    username = forms.CharField(max_length=255,
                               required=False,
                               label=_("username"),
                               help_text=_("the username used for the authentication."))
    password = forms.CharField(max_length=500,
                               required=False,
                               label=_("password"),
                               help_text=_("the password used for the authentication."),
                               widget=forms.PasswordInput())
    auth_type = forms.ChoiceField(choices=AuthTypeEnum.as_choices(),
                                  required=False,
                                  label=_("authentication type"),
                                  help_text=_("kind of authentication mechanism shall used."))

    def __init__(self, request, *args, **kwargs):
        self.request = request
        super().__init__(*args, **kwargs)
        if not self.request.user.is_anonymous:
            self.fields['registering_for_organization'].queryset = self.request.user.get_publishable_organizations().\
                filter(is_autogenerated=False)

    def clean(self):
        cleaned_data = super().clean()
        if cleaned_data.get("auth_type", None):
            if not cleaned_data.get("username", None):
                self.add_error(field="username", error=_("You must provide a username if you joice any "
                                                         "authentication method."))
            if not cleaned_data.get("password", None):
                self.add_error(field="password", error=_("You must provide a password if you joice any "
                                                         "authentication method."))
        return cleaned_data


class ServiceModelForm(ModelForm):
    class Meta:
        model = Service
        fields = "__all__"


class LayerModelForm(ModelForm):
    class Meta:
        model = Layer
        fields = "__all__"


class FeatureTypeModelForm(ModelForm):
    class Meta:
        model = FeatureType
        fields = "__all__"
