# Generated by Django 3.2.6 on 2021-09-01 14:44

import MrMap.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import main.models
import mptt.fields
import resourceNew.models.document
import resourceNew.models.harvest
import resourceNew.models.security
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('job', '0002_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('structure', '0002_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AllowedOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('allowed_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, validators=[MrMap.validators.geometry_is_empty])),
                ('description', models.CharField(help_text='a short description what this allowed operation controls.', max_length=512, verbose_name='description')),
            ],
            options={
                'abstract': False,
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AllowedOperationGroupRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='AnalyzedResponseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('entity_count', models.FloatField(help_text='Stores the response entity count. For WMS this will be the indiscreet number of megapixels that are returned by the service. For WFS this will be discrete number of feature types that are returned by the service.')),
                ('entity_total_count', models.FloatField(help_text='Stores the response entity total count. For WMS this will be the indiscreet number of megapixels that are returned by the service. For WFS this will be discrete number of feature types that are returned by the service.')),
                ('entity_unit', models.CharField(choices=[('MPx', 'MPx'), ('Ft', 'Ft')], help_text='The unit in which the entity count is stored.', max_length=5)),
            ],
            options={
                'abstract': False,
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DatasetMetadata',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('xml_backup_file', models.FileField(help_text='the original xml as backup to restore the xml field.', upload_to=resourceNew.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[(None, '---'), ('capabilities', 'capabilities'), ('iso metadata', 'iso metadata')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('harvest_result', models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result')),
                ('insufficient_quality', models.TextField(blank=True, help_text='todo', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('spatial_res_type', models.CharField(choices=[('groundDistance', 'groundDistance'), ('scaleDenominator', 'scaleDenominator')], help_text='Ground resolution in meter or the equivalent scale.', max_length=20, null=True, verbose_name='resolution type')),
                ('spatial_res_value', models.FloatField(blank=True, help_text='The value depending on the selected resolution type.', null=True, verbose_name='resolution value')),
                ('format', models.CharField(blank=True, choices=[(None, '---'), ('Database', 'Database'), ('Esri shape', 'Esri shape'), ('CSV', 'CSV'), ('GML', 'GML'), ('GeoTIFF', 'GeoTIFF')], help_text='The format in which the described dataset is stored.', max_length=20, null=True, verbose_name='format')),
                ('charset', models.CharField(blank=True, choices=[(None, '---'), ('utf8', 'utf8')], help_text='The charset which is used by the stored data.', max_length=10, null=True, verbose_name='charset')),
                ('inspire_top_consistence', models.BooleanField(default=False, help_text='Flag to signal if the described data has a topologically consistence.')),
                ('preview_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('lineage_statement', models.TextField(blank=True, null=True)),
                ('update_frequency_code', models.CharField(blank=True, choices=[('annually', 'annually'), ('asNeeded', 'asNeeded'), ('biannually', 'biannually'), ('irregular', 'irregular'), ('notPlanned', 'notPlanned'), ('unknown', 'unknown')], max_length=20, null=True)),
                ('bounding_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('dataset_id', models.CharField(help_text='identifier of the remote data', max_length=4096, null=True)),
                ('dataset_id_code_space', models.CharField(blank=True, help_text='code space for the given identifier', max_length=4096, null=True)),
                ('inspire_interoperability', models.BooleanField(default=False, help_text='flag to signal if this ')),
            ],
            options={
                'verbose_name': 'dataset metadata',
                'verbose_name_plural': 'dataset metadata',
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DatasetMetadataRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('relation_type', models.CharField(choices=[(None, '---'), ('visualizes', 'visualizes'), ('describes', 'describes'), ('harvestedThrough', 'harvestedThrough'), ('harvestedParent', 'harvestedParent'), ('publishedBy', 'publishedBy')], max_length=20)),
                ('is_internal', models.BooleanField(default=False, help_text='true means that this relation is created by a user and the dataset is maybe not linked in a capabilities document for example.', verbose_name='internal relation?')),
                ('origin', models.CharField(choices=[(None, '---'), ('Capabilities', 'Capabilities'), ('Upload', 'Upload'), ('Editor', 'Editor'), ('Catalogue', 'Catalogue')], help_text='determines where this relation was found or it is added by a user.', max_length=20, verbose_name='origin')),
            ],
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('name', models.CharField(help_text='the type of the content stored in extent field.', max_length=50, verbose_name='name')),
                ('units', models.CharField(help_text='measurement units specifier', max_length=50, verbose_name='units')),
                ('parsed_extent', models.TextField(help_text='The extent string declares what value(s) along the Dimension axis are appropriate for this specific geospatial data object.', verbose_name='extent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExternalAuthentication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('username', models.CharField(blank=True, help_text='the username used for the authentication.', max_length=255, verbose_name='username')),
                ('password', models.CharField(blank=True, help_text='the password used for the authentication.', max_length=500, verbose_name='password')),
                ('auth_type', models.CharField(blank=True, choices=[(None, '---'), ('http_basic', 'http_basic'), ('http_digest', 'http_digest')], help_text='kind of authentication mechanism shall used.', max_length=100, verbose_name='authentication type')),
                ('test_url', models.URLField(editable=False, help_text='this shall be the full get capabilities request url.', null=True, validators=[MrMap.validators.validate_get_capablities_uri], verbose_name='Service url')),
                ('key_file', models.FileField(editable=False, max_length=1024, upload_to=resourceNew.models.security.key_file_path)),
            ],
            options={
                'abstract': False,
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('xml_backup_file', models.FileField(help_text='the original xml as backup to restore the xml field.', upload_to=resourceNew.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('hits', models.PositiveIntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier')),
                ('bbox_lat_lon', django.contrib.gis.db.models.fields.PolygonField(blank=True, editable=False, help_text='bounding box shall be supplied regardless of what CRS the map server may support, but it may be approximate if the data are not natively in geographic coordinates. The purpose of bounding box is to facilitate geographic searches without requiring coordinate transformations by the search engine.', null=True, srid=4326, verbose_name='bounding box')),
                ('describe_feature_type_document', models.TextField(help_text='the fetched content of the download describe feature type document.', null=True, verbose_name='describe feature type')),
            ],
            options={
                'verbose_name': 'feature type',
                'verbose_name_plural': 'feature types',
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FeatureTypeElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('max_occurs', models.IntegerField(default=1)),
                ('min_occurs', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=255)),
                ('data_type', models.CharField(blank=True, max_length=255, null=True)),
                ('required', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'feature type element',
                'verbose_name_plural': 'feature type elements',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='FeatureTypeMetadata',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('xml_backup_file', models.FileField(help_text='the original xml as backup to restore the xml field.', upload_to=resourceNew.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[(None, '---'), ('capabilities', 'capabilities'), ('iso metadata', 'iso metadata')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('harvest_result', models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result')),
                ('insufficient_quality', models.TextField(blank=True, help_text='todo', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
            ],
            options={
                'verbose_name': 'feature type metadata',
                'verbose_name_plural': 'feature type metadata',
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HarvestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('result_file', models.FileField(editable=False, max_length=1024, upload_to=resourceNew.models.harvest.result_file_path)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HttpRequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('elapsed', models.DurationField()),
                ('method', models.CharField(max_length=20)),
                ('url', models.URLField(max_length=4096)),
                ('body', models.FileField(max_length=1024, upload_to=resourceNew.models.security.request_body_path)),
                ('headers', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='HttpResponseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.IntegerField(default=0)),
                ('reason', models.CharField(max_length=50)),
                ('elapsed', models.DurationField()),
                ('headers', models.JSONField(default=dict)),
                ('url', models.URLField(max_length=4096)),
                ('content', models.FileField(max_length=1024, upload_to=resourceNew.models.security.response_content_path)),
            ],
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(db_index=True, max_length=255, unique=True)),
            ],
            options={
                'ordering': ['keyword'],
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('xml_backup_file', models.FileField(help_text='the original xml as backup to restore the xml field.', upload_to=resourceNew.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('hits', models.PositiveIntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier')),
                ('bbox_lat_lon', django.contrib.gis.db.models.fields.PolygonField(blank=True, editable=False, help_text='bounding box shall be supplied regardless of what CRS the map server may support, but it may be approximate if the data are not natively in geographic coordinates. The purpose of bounding box is to facilitate geographic searches without requiring coordinate transformations by the search engine.', null=True, srid=4326, verbose_name='bounding box')),
                ('is_queryable', models.BooleanField(default=False, editable=False, help_text='flag to signal if this layer provides factual information or not. Parsed from capabilities.', verbose_name='is queryable')),
                ('is_opaque', models.BooleanField(default=False, editable=False, help_text='flag to signal if this layer support transparency content or not. Parsed from capabilities.', verbose_name='is opaque')),
                ('is_cascaded', models.BooleanField(default=False, editable=False, help_text='WMS cascading allows to expose layers coming from other WMS servers as if they were local layers', verbose_name='is cascaded')),
                ('scale_min', models.FloatField(blank=True, editable=False, help_text='minimum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale minimum value')),
                ('scale_max', models.FloatField(blank=True, editable=False, help_text='maximum scale for a possible request to this layer. If the request is out of the given scope, the service will response with empty transparentimages. None value means no restriction.', null=True, verbose_name='scale maximum value')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'layer',
                'verbose_name_plural': 'layers',
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LayerMetadata',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('xml_backup_file', models.FileField(help_text='the original xml as backup to restore the xml field.', upload_to=resourceNew.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[(None, '---'), ('capabilities', 'capabilities'), ('iso metadata', 'iso metadata')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('harvest_result', models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result')),
                ('insufficient_quality', models.TextField(blank=True, help_text='todo', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('preview_image', models.ImageField(blank=True, null=True, upload_to='')),
            ],
            options={
                'verbose_name': 'layer metadata',
                'verbose_name_plural': 'layer metadata',
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LegendUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('legend_url', models.URLField(editable=False, help_text='contains the location of an image of a map legend appropriate to the enclosing Style.', max_length=4096)),
                ('height', models.IntegerField(editable=False, help_text='the size of the image in pixels')),
                ('width', models.IntegerField(editable=False, help_text='the size of the image in pixels')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('identifier', models.CharField(max_length=255, unique=True)),
                ('symbol_url', models.URLField(null=True)),
                ('description', models.TextField()),
                ('description_url', models.URLField(null=True)),
                ('is_open_data', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MapContext',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('title', models.CharField(help_text='a short descriptive title for this map context', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the topic of this map context', null=True, verbose_name='abstract')),
            ],
            options={
                'abstract': False,
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MapContextLayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='an identifying name for this map context layer', max_length=1000, verbose_name='name')),
                ('title', models.CharField(blank=True, help_text='a short descriptive title for this map context layer', max_length=1000, null=True, verbose_name='title')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MetadataContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the organization', max_length=256, null=True, verbose_name='Name')),
                ('person_name', models.CharField(max_length=200, null=True, verbose_name='Contact person')),
                ('email', models.EmailField(max_length=100, null=True, verbose_name='E-Mail')),
                ('phone', models.CharField(max_length=100, null=True, verbose_name='Phone')),
                ('facsimile', models.CharField(blank=True, max_length=100, null=True, verbose_name='Facsimile')),
                ('city', models.CharField(max_length=100, null=True, verbose_name='City')),
                ('postal_code', models.CharField(max_length=100, null=True, verbose_name='Postal code')),
                ('address_type', models.CharField(max_length=100, null=True, verbose_name='Address type')),
                ('address', models.CharField(max_length=100, null=True, verbose_name='Address')),
                ('state_or_province', models.CharField(max_length=100, null=True, verbose_name='State or province')),
                ('country', models.CharField(max_length=100, null=True, verbose_name='Country')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MimeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mime_type', models.CharField(db_index=True, help_text='The Internet Media Type', max_length=500, unique=True, verbose_name='mime type')),
            ],
        ),
        migrations.CreateModel(
            name='OGCOperation',
            fields=[
                ('operation', models.CharField(choices=[(None, '---'), ('GetCapabilities', 'GetCapabilities'), ('GetMap', 'GetMap'), ('GetFeatureInfo', 'GetFeatureInfo'), ('DescribeLayer', 'DescribeLayer'), ('GetLegendGraphic', 'GetLegendGraphic'), ('GetStyles', 'GetStyles'), ('PutStyles', 'PutStyles'), ('GetFeature', 'GetFeature'), ('Transaction', 'Transaction'), ('LockFeature', 'LockFeature'), ('DescribeFeatureType', 'DescribeFeatureType'), ('GetFeatureWithLock', 'GetFeatureWithLock'), ('GetGmlObject', 'GetGmlObject'), ('ListStoredQueries', 'ListStoredQueries'), ('GetPropertyValue', 'GetPropertyValue'), ('DescribeStoredQueries', 'DescribeStoredQueries'), ('GetRecords', 'GetRecords'), ('DescribeRecord', 'DescribeRecord'), ('GetRecordById', 'GetRecordById')], max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='OperationUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('method', models.CharField(choices=[(None, '---'), ('Get', 'Get'), ('Post', 'Post')], help_text='the http method you can perform for this url', max_length=10, verbose_name='http method')),
                ('url', models.URLField(editable=False, help_text='the url for this operation', max_length=4096, verbose_name='url')),
                ('operation', models.CharField(choices=[(None, '---'), ('GetCapabilities', 'GetCapabilities'), ('GetMap', 'GetMap'), ('GetFeatureInfo', 'GetFeatureInfo'), ('DescribeLayer', 'DescribeLayer'), ('GetLegendGraphic', 'GetLegendGraphic'), ('GetStyles', 'GetStyles'), ('PutStyles', 'PutStyles'), ('GetFeature', 'GetFeature'), ('Transaction', 'Transaction'), ('LockFeature', 'LockFeature'), ('DescribeFeatureType', 'DescribeFeatureType'), ('GetFeatureWithLock', 'GetFeatureWithLock'), ('GetGmlObject', 'GetGmlObject'), ('ListStoredQueries', 'ListStoredQueries'), ('GetPropertyValue', 'GetPropertyValue'), ('DescribeStoredQueries', 'DescribeStoredQueries'), ('GetRecords', 'GetRecords'), ('DescribeRecord', 'DescribeRecord'), ('GetRecordById', 'GetRecordById')], editable=False, help_text='the operation you can perform with this url.', max_length=30, verbose_name='operation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProxySetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('camouflage', models.BooleanField(default=False, help_text='if true, all related xml documents are secured, by replace all hostname/internet addresses of the related service by the hostname of the current mr. map instance.', verbose_name='camouflage')),
                ('log_response', models.BooleanField(default=False, help_text='if true, all responses of the related service will be logged.', verbose_name='log response')),
            ],
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ReferenceSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100)),
                ('prefix', models.CharField(choices=[(None, '---'), ('EPSG', 'EPSG')], default='EPSG', max_length=255)),
            ],
            options={
                'ordering': ['-code'],
            },
        ),
        migrations.CreateModel(
            name='RemoteMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('link', models.URLField(help_text='the url where the metadata could be downloaded from.', max_length=4094, verbose_name='download link')),
                ('remote_content', models.TextField(help_text='the fetched content of the download url.', null=True, verbose_name='remote content')),
                ('object_id', models.UUIDField(help_text='the uuid of the described service, layer or feature type', verbose_name='described resource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('xml_backup_file', models.FileField(help_text='the original xml as backup to restore the xml field.', upload_to=resourceNew.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('hits', models.PositiveIntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
                ('is_active', models.BooleanField(default=False, help_text='Used to activate/deactivate the service. If it is deactivated, you cant request the service through the Mr. Map proxy.', verbose_name='is active?')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(editable=False, help_text='the base url of the service', max_length=4096, verbose_name='url')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
            },
            bases=(main.models.GenericModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ServiceAccessGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('description', models.CharField(help_text='a short description what this group is for.', max_length=512, verbose_name='description')),
            ],
            options={
                'abstract': False,
            },
            bases=(main.models.GenericModelMixin, 'auth.group', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceMetadata',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('xml_backup_file', models.FileField(help_text='the original xml as backup to restore the xml field.', upload_to=resourceNew.models.document.xml_backup_file_path, verbose_name='xml backup')),
                ('access_constraints', models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints')),
                ('fees', models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees')),
                ('use_limitation', models.TextField(blank=True, null=True)),
                ('license_source_note', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_stamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='date that the metadata was created. If this is a metadata record which is parsed from remote iso metadata, the date stamp of the remote iso metadata will be used.', verbose_name='date stamp')),
                ('file_identifier', models.CharField(db_index=True, default=uuid.uuid4, editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier')),
                ('origin', models.CharField(choices=[(None, '---'), ('capabilities', 'capabilities'), ('iso metadata', 'iso metadata')], editable=False, help_text='Where the metadata record comes from.', max_length=20, verbose_name='origin')),
                ('origin_url', models.URLField(blank=True, editable=False, help_text='the url of the document where the information of this metadata record comes from', max_length=4096, null=True, verbose_name='origin url')),
                ('title', models.CharField(help_text='a short descriptive title for this metadata', max_length=1000, verbose_name='title')),
                ('abstract', models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract')),
                ('is_broken', models.BooleanField(default=False, editable=False, help_text='TODO', verbose_name='is broken')),
                ('is_customized', models.BooleanField(default=False, editable=False, help_text='If the metadata record is customized, this flag is True', verbose_name='is customized')),
                ('harvest_result', models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result')),
                ('insufficient_quality', models.TextField(blank=True, help_text='todo', null=True)),
                ('is_searchable', models.BooleanField(default=False, help_text='only searchable metadata will be returned from the search api', verbose_name='is searchable')),
                ('hits', models.IntegerField(default=0, editable=False, help_text='how many times this metadata was requested by a client', verbose_name='hits')),
            ],
            options={
                'verbose_name': 'service metadata',
                'verbose_name_plural': 'service metadata',
            },
            bases=(main.models.GenericModelMixin, models.Model),
            managers=[
                ('iso_metadata', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[(None, '---'), ('wms', 'wms'), ('wfs', 'wfs'), ('wmc', 'wmc'), ('dataset', 'dataset'), ('csw', 'csw')], editable=False, help_text='the concrete type name of the service type.', max_length=10, verbose_name='type')),
                ('version', models.CharField(choices=[(None, '---'), ('1.0.0', '1.0.0'), ('1.1.0', '1.1.0'), ('1.1.1', '1.1.1'), ('1.3.0', '1.3.0'), ('2.0.0', '2.0.0'), ('2.0.2', '2.0.2')], editable=False, help_text='the version of the service type as sem version', max_length=10, verbose_name='version')),
                ('specification', models.URLField(editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TimeExtent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('start', models.DateTimeField()),
                ('stop', models.DateTimeField()),
                ('resolution', models.DurationField(null=True)),
                ('created_by_user', models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_timeextent_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('dimension', models.ForeignKey(help_text='the related dimension where this interval was found.', on_delete=django.db.models.deletion.CASCADE, related_name='time_extents', related_query_name='time_extent', to='resourceNew.dimension', verbose_name='related dimension')),
                ('last_modified_by', models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_timeextent_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('owned_by_org', models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_timeextent_owned_by_org', to='structure.organization', verbose_name='Owner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The timestamp of the creation date of this object.', verbose_name='Created at')),
                ('last_modified_at', models.DateTimeField(auto_now=True, db_index=True, help_text='The timestamp of the last modification of this object', verbose_name='Last modified at')),
                ('name', models.CharField(editable=False, help_text="The style's Name is used in the Map request STYLES parameter to lookup the style on server side.", max_length=255, verbose_name='name')),
                ('title', models.CharField(editable=False, help_text='The Title is a human-readable string as an alternative for the name attribute.', max_length=255, verbose_name='title')),
                ('created_by_user', models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_style_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('last_modified_by', models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_style_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('layer', models.ForeignKey(editable=False, help_text='the layer for that this style is for.', on_delete=django.db.models.deletion.CASCADE, related_name='styles', related_query_name='style', to='resourceNew.layer', verbose_name='related layer')),
                ('owned_by_org', models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_style_owned_by_org', to='structure.organization', verbose_name='Owner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='servicetype',
            constraint=models.UniqueConstraint(fields=('name', 'version'), name='resourcenew_servicetype_unique_name_version'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_servicemetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='described_object',
            field=models.OneToOneField(editable=False, help_text='choice the service you want to describe with this metadata', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', related_query_name='metadata', to='resourceNew.service', verbose_name='described service'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='servicemetadata_metadata', related_query_name='servicemetadata_metadata', to='resourceNew.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_servicemetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='licence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='resourceNew.licence'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='metadata_contact',
            field=models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_service_metadata', related_query_name='metadata_contact_service_metadata', to='resourceNew.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_servicemetadata_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='servicemetadata',
            name='service_contact',
            field=models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_service_metadata', related_query_name='service_contact_service_metadata', to='resourceNew.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AddField(
            model_name='serviceaccessgroup',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_serviceaccessgroup_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='serviceaccessgroup',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_serviceaccessgroup_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='serviceaccessgroup',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_serviceaccessgroup_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='service',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_service_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='service',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_service_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='service',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_service_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_type',
            field=models.ForeignKey(editable=False, help_text='the concrete type and version of the service.', on_delete=django.db.models.deletion.PROTECT, related_name='services', related_query_name='service', to='resourceNew.servicetype', verbose_name='service type'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_remotemetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_remotemetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_remotemetadata_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='remotemetadata',
            name='service',
            field=models.ForeignKey(help_text='the service where this remote metadata is related to. This remote metadata was found in the GetCapabilites document of the related service.', on_delete=django.db.models.deletion.CASCADE, related_name='remote_metadata', related_query_name='remote_metadata', to='resourceNew.service', verbose_name='service'),
        ),
        migrations.AddConstraint(
            model_name='referencesystem',
            constraint=models.UniqueConstraint(fields=('code', 'prefix'), name='resourcenew_referencesystem_unique_code_prefix'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_proxysetting_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_proxysetting_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_proxysetting_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='proxysetting',
            name='secured_service',
            field=models.OneToOneField(help_text='the configured service for this proxy settings', on_delete=django.db.models.deletion.CASCADE, related_name='proxy_setting', related_query_name='proxy_setting', to='resourceNew.service', verbose_name='secured service'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_operationurl_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_operationurl_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='mime_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='operation_urls', related_query_name='operation_url', to='resourceNew.MimeType', verbose_name='internet mime type'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_operationurl_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='operationurl',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the service for that this url can be used for.', on_delete=django.db.models.deletion.CASCADE, related_name='operation_urls', related_query_name='operation_url', to='resourceNew.service', verbose_name='related service'),
        ),
        migrations.AddConstraint(
            model_name='metadatacontact',
            constraint=models.UniqueConstraint(fields=('name', 'person_name', 'email', 'phone', 'facsimile', 'city', 'postal_code', 'address_type', 'address', 'state_or_province', 'country'), name='resourcenew_metadatacontact_unique_metadata_contact'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='map_context',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resourceNew.mapcontext'),
        ),
        migrations.AddField(
            model_name='mapcontextlayer',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_layers', to='resourceNew.mapcontextlayer'),
        ),
        migrations.AddField(
            model_name='mapcontext',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_mapcontext_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='mapcontext',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_mapcontext_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='mapcontext',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_mapcontext_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_legendurl_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_legendurl_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='mime_type',
            field=models.ForeignKey(editable=False, help_text='the mime type of the remote legend url', on_delete=django.db.models.deletion.RESTRICT, related_name='legend_urls', related_query_name='legend_url', to='resourceNew.mimetype', verbose_name='internet mime type'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_legendurl_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='legendurl',
            name='style',
            field=models.OneToOneField(editable=False, help_text='the style entity which is linked to this legend url', on_delete=django.db.models.deletion.CASCADE, related_name='legend_url', related_query_name='legend_url', to='resourceNew.style', verbose_name='related style'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_layermetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='described_object',
            field=models.OneToOneField(help_text='choice the layer you want to describe with this metadata', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', related_query_name='metadata', to='resourceNew.layer', verbose_name='described layer'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='layermetadata_metadata', related_query_name='layermetadata_metadata', to='resourceNew.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_layermetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='layermetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_layermetadata_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='layer',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_layer_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='layer',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_layer_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='layer',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_layer_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='layer',
            name='parent',
            field=mptt.fields.TreeForeignKey(editable=False, help_text='the ancestor of this layer.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', related_query_name='child', to='resourceNew.layer', verbose_name='parent layer'),
        ),
        migrations.AddField(
            model_name='layer',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='layer', related_query_name='layer', to='resourceNew.ReferenceSystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='layer',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the main service where this element is part of', on_delete=django.db.models.deletion.CASCADE, related_name='layers', related_query_name='layer', to='resourceNew.service', verbose_name='parent service'),
        ),
        migrations.AddField(
            model_name='httpresponselog',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='response', related_query_name='response', to='resourceNew.httprequestlog'),
        ),
        migrations.AddField(
            model_name='httprequestlog',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='http_request_logs', related_query_name='http_request_log', to='resourceNew.service'),
        ),
        migrations.AddField(
            model_name='httprequestlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='http_request_logs', related_query_name='http_request_log', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_harvestresult_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='harvest_results', related_query_name='harvest_result', to='job.job'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_harvestresult_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_harvestresult_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='harvestresult',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvest_results', related_query_name='harvest_result', to='resourceNew.service'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretypemetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='described_object',
            field=models.OneToOneField(help_text='choice the feature type you want to describe with this metadata', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', related_query_name='metadata', to='resourceNew.featuretype', verbose_name='described feature type'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='featuretypemetadata_metadata', related_query_name='featuretypemetadata_metadata', to='resourceNew.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretypemetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='featuretypemetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretypemetadata_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretypeelement_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='feature_type',
            field=models.ForeignKey(help_text='related feature type of this element', on_delete=django.db.models.deletion.CASCADE, related_name='elements', related_query_name='element', to='resourceNew.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretypeelement_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='featuretypeelement',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretypeelement_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretype_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretype_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='output_formats',
            field=models.ManyToManyField(blank=True, editable=False, help_text='This is a list of MIME types indicating the output formats that may be generated for a feature type.  If this optional element is not specified, then all the result formats listed for the GetFeature operation are assumed to be supported. ', related_name='feature_types', related_query_name='feature_type', to='resourceNew.MimeType', verbose_name='output formats'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_featuretype_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='featuretype', related_query_name='featuretype', to='resourceNew.ReferenceSystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='featuretype',
            name='service',
            field=models.ForeignKey(editable=False, help_text='the main service where this element is part of', on_delete=django.db.models.deletion.CASCADE, related_name='featuretypes', related_query_name='featuretype', to='resourceNew.service', verbose_name='parent service'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_externalauthentication_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_externalauthentication_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_externalauthentication_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='externalauthentication',
            name='secured_service',
            field=models.OneToOneField(help_text='the service which uses this credentials.', on_delete=django.db.models.deletion.CASCADE, related_name='external_authentication', related_query_name='external_authentication', to='resourceNew.service', verbose_name='secured service'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_dimension_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='dataset_metadata',
            field=models.ForeignKey(blank=True, help_text='the related dataset metadata of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_dimensions', related_query_name='dataset_metadata_dimension', to='resourceNew.datasetmetadata', verbose_name='dataset metadata'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='feature_type',
            field=models.ForeignKey(blank=True, help_text='the related feature type of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feature_type_dimensions', related_query_name='feature_type_dimension', to='resourceNew.featuretype', verbose_name='feature type'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_dimension_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='layer',
            field=models.ForeignKey(blank=True, help_text='the related layer of this dimension entity', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layer_dimensions', related_query_name='layer_dimension', to='resourceNew.layer', verbose_name='layer'),
        ),
        migrations.AddField(
            model_name='dimension',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_dimension_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_datasetmetadatarelation_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='dataset_metadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='resourceNew.datasetmetadata'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='feature_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='resourceNew.featuretype'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_datasetmetadatarelation_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='layer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='resourceNew.layer'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_datasetmetadatarelation_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='datasetmetadatarelation',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata_relations', related_query_name='dataset_metadata_relation', to='resourceNew.service'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_datasetmetadata_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='dataset_contact',
            field=models.ForeignKey(help_text='this is the contact which provides this dataset.', on_delete=django.db.models.deletion.RESTRICT, related_name='dataset_contact_metadata', related_query_name='dataset_contact_metadata', to='resourceNew.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='datasetmetadata_metadata', related_query_name='datasetmetadata_metadata', to='resourceNew.Keyword', verbose_name='keywords'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_datasetmetadata_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='licence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='resourceNew.licence'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='metadata_contact',
            field=models.ForeignKey(help_text='this is the contact which is responsible for the metadata information of the dataset.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_metadata', related_query_name='metadata_contact_metadata', to='resourceNew.metadatacontact', verbose_name='contact'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_datasetmetadata_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, related_name='dataset_metadata', related_query_name='dataset_metadata', to='resourceNew.ReferenceSystem', verbose_name='reference systems'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='self_pointing_feature_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all feature types which are linking to this dataset metadata in there capabilities.', related_name='dataset_metadata', related_query_name='dataset_metadata', through='resourceNew.DatasetMetadataRelation', to='resourceNew.FeatureType', verbose_name='feature types'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='self_pointing_layers',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all layers which are linking to this dataset metadata in there capabilities.', related_name='dataset_metadata', related_query_name='dataset_metadata', through='resourceNew.DatasetMetadataRelation', to='resourceNew.Layer', verbose_name='layers'),
        ),
        migrations.AddField(
            model_name='datasetmetadata',
            name='self_pointing_services',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all services from which this dataset was harvested.', related_name='dataset_metadata', related_query_name='dataset_metadata', through='resourceNew.DatasetMetadataRelation', to='resourceNew.Service', verbose_name='services'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_analyzedresponselog_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_analyzedresponselog_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_analyzedresponselog_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='analyzedresponselog',
            name='response',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='analyzed_response', related_query_name='analyzed_response', to='resourceNew.httpresponselog'),
        ),
        migrations.AddField(
            model_name='allowedoperationgrouprelation',
            name='allowed_operation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resourceNew.allowedoperation'),
        ),
        migrations.AddField(
            model_name='allowedoperationgrouprelation',
            name='service_access_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='resourceNew.serviceaccessgroup'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='allowed_groups',
            field=models.ManyToManyField(related_name='allowed_operations', related_query_name='allowed_operation', through='resourceNew.AllowedOperationGroupRelation', to='resourceNew.ServiceAccessGroup'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='created_by_user',
            field=models.ForeignKey(blank=True, editable=False, help_text='The user who has created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_allowedoperation_created_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='The last user who has modified this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_allowedoperation_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='operations',
            field=models.ManyToManyField(related_name='allowed_operations', related_query_name='allowed_operation', to='resourceNew.OGCOperation'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='owned_by_org',
            field=models.ForeignKey(blank=True, editable=False, help_text='The organization which is the owner of this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcenew_allowedoperation_owned_by_org', to='structure.organization', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='secured_feature_types',
            field=models.ManyToManyField(help_text='Select one or more feature types.', related_name='allowed_operations', related_query_name='allowed_operation', to='resourceNew.FeatureType', verbose_name='secured feature types'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='secured_layers',
            field=models.ManyToManyField(help_text='Select one or more layers. Note that all sub layers of a selected layer will also be secured.', related_name='allowed_operations', related_query_name='allowed_operation', to='resourceNew.Layer', verbose_name='secured layers'),
        ),
        migrations.AddField(
            model_name='allowedoperation',
            name='secured_service',
            field=models.ForeignKey(help_text='the service where some layers or feature types are secured of.', on_delete=django.db.models.deletion.CASCADE, related_name='allowed_operations', related_query_name='allowed_operation', to='resourceNew.service', verbose_name='secured service'),
        ),
        migrations.AddConstraint(
            model_name='proxysetting',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('camouflage', True), ('log_response', True)), models.Q(('camouflage', True), ('log_response', False)), models.Q(('camouflage', False), ('log_response', False)), _connector='OR'), name='resourcenew_proxysetting_log_response_without_camouflage'),
        ),
        migrations.AddConstraint(
            model_name='datasetmetadatarelation',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('service', False)), _negated=True)), name='resourcenew_datasetmetadatarelation_one_related_object_selected'),
        ),
        migrations.AddConstraint(
            model_name='datasetmetadata',
            constraint=models.UniqueConstraint(fields=('dataset_id', 'dataset_id_code_space'), name='resourcenew_datasetmetadata_unique_origin_url_file_identifier'),
        ),
    ]
