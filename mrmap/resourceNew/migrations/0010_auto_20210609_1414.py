# Generated by Django 3.1.8 on 2021-06-09 12:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('resourceNew', '0009_auto_20210609_1347'),
    ]

    operations = [
        migrations.AlterField(
            model_name='datasetmetadata',
            name='abstract',
            field=models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='access_constraints',
            field=models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='dataset_contact',
            field=models.ForeignKey(help_text='', on_delete=django.db.models.deletion.RESTRICT, related_name='dataset_contact_metadata', related_query_name='dataset_contact_metadata', to='resourceNew.metadatacontact', verbose_name='contact'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='dataset_id',
            field=models.CharField(help_text='identifier of the remote data', max_length=4096, null=True),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='dataset_id_code_space',
            field=models.CharField(help_text='code space for the given identifier', max_length=4096, null=True),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='fees',
            field=models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='file_identifier',
            field=models.CharField(editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='harvest_result',
            field=models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='insufficient_quality',
            field=models.TextField(help_text=''),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='license_source_note',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='metadata_contact',
            field=models.ForeignKey(help_text='', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_metadata', related_query_name='metadata_contact_metadata', to='resourceNew.metadatacontact', verbose_name='contact'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='spatial_res_type',
            field=models.CharField(choices=[('groundDistance', 'groundDistance'), ('scaleDenominator', 'groundDistance')], help_text='Ground resolution in meter or the equivalent scale.', max_length=20, null=True, verbose_name='resolution type'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='use_limitation',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='featuretype',
            name='identifier',
            field=models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier'),
        ),
        migrations.AlterField(
            model_name='featuretypemetadata',
            name='abstract',
            field=models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract'),
        ),
        migrations.AlterField(
            model_name='featuretypemetadata',
            name='file_identifier',
            field=models.CharField(editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier'),
        ),
        migrations.AlterField(
            model_name='featuretypemetadata',
            name='harvest_result',
            field=models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result'),
        ),
        migrations.AlterField(
            model_name='featuretypemetadata',
            name='insufficient_quality',
            field=models.TextField(help_text=''),
        ),
        migrations.AlterField(
            model_name='layer',
            name='identifier',
            field=models.CharField(editable=False, help_text='this is a string which identifies the element on the remote service.', max_length=500, null=True, verbose_name='identifier'),
        ),
        migrations.AlterField(
            model_name='layermetadata',
            name='abstract',
            field=models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract'),
        ),
        migrations.AlterField(
            model_name='layermetadata',
            name='file_identifier',
            field=models.CharField(editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier'),
        ),
        migrations.AlterField(
            model_name='layermetadata',
            name='harvest_result',
            field=models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result'),
        ),
        migrations.AlterField(
            model_name='layermetadata',
            name='insufficient_quality',
            field=models.TextField(help_text=''),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='address',
            field=models.CharField(max_length=100, null=True, verbose_name='Address'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='address_type',
            field=models.CharField(max_length=100, null=True, verbose_name='Address type'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='city',
            field=models.CharField(max_length=100, null=True, verbose_name='City'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='country',
            field=models.CharField(max_length=100, null=True, verbose_name='Country'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='email',
            field=models.EmailField(max_length=100, null=True, verbose_name='E-Mail'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='facsimile',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Facsimile'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='name',
            field=models.CharField(help_text='The name of the organization', max_length=256, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='person_name',
            field=models.CharField(max_length=200, null=True, verbose_name='Contact person'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='phone',
            field=models.CharField(max_length=100, null=True, verbose_name='Phone'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='postal_code',
            field=models.CharField(max_length=100, null=True, verbose_name='Postal code'),
        ),
        migrations.AlterField(
            model_name='metadatacontact',
            name='state_or_province',
            field=models.CharField(max_length=100, null=True, verbose_name='State or province'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='abstract',
            field=models.TextField(help_text='brief summary of the content of this metadata.', null=True, verbose_name='abstract'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='access_constraints',
            field=models.TextField(blank=True, help_text='access constraints for the given resource.', null=True, verbose_name='access constraints'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='fees',
            field=models.TextField(blank=True, help_text='Costs and of terms of use for the given resource.', null=True, verbose_name='fees'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='file_identifier',
            field=models.CharField(editable=False, help_text='the parsed file identifier from the iso metadata xml (gmd:fileIdentifier) OR for example if it is a layer/featuretypethe uuid of the described layer/featuretype shall be used to identify the generated iso metadata xml.', max_length=1000, null=True, verbose_name='file identifier'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='harvest_result',
            field=models.CharField(choices=[(None, '---'), ('fetched', 'fetched'), ('insufficient quality', 'insufficient quality'), ('successfully', 'successfully')], editable=False, help_text='to determine errors while harvesting process. Get linked iso metadata from parsed capabilities result is also a harvesting process.', max_length=50, null=True, verbose_name='harvest result'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='insufficient_quality',
            field=models.TextField(help_text=''),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='license_source_note',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='metadata_contact',
            field=models.ForeignKey(help_text='', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_service_metadata', related_query_name='metadata_contact_service_metadata', to='resourceNew.metadatacontact', verbose_name='contact'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='service_contact',
            field=models.ForeignKey(help_text='', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_service_metadata', related_query_name='service_contact_service_metadata', to='resourceNew.metadatacontact', verbose_name='contact'),
        ),
        migrations.AlterField(
            model_name='servicemetadata',
            name='use_limitation',
            field=models.TextField(null=True),
        ),
    ]
