from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.contenttypes.models import ContentType
from django.test import TestCase
from guardian.core import ObjectPermissionChecker

from guardian_roles.models.acl import TemplateRole, OwnerBasedRole, ObjectBasedRole
from guardian_roles.utils import get_owner_model


class SignalPostSaveOwnerTestCase(TestCase):
    """Test the post_save signal on `settings.GUARDIAN_ROLES_OWNER_MODEL` model."""
    def setUp(self) -> None:
        TemplateRole.objects.create(name=settings.GUARDIAN_ROLES_ADMIN_ROLE_FOR_ROLE_ADMIN_ROLE)
        TemplateRole.objects.create(name='some_other_role')

    def test_post_save_signal_on_owner_model(self):
        """
        Checks the `handle_owner_based_template_role_creation` receiver.

        Three conditions shall be generated by the receiver:

        * If a `settings.GUARDIAN_ROLES_OWNER_MODEL` is created, one `OwnerBasedRole`  per `TemplateRole` shall
          be created.

        * Additionally one `ObjectBasedRole` per generated `OwnerBasedRole`.

        * Additionally the generated `OwnerBasedRole` which is generated from the `TemplateRole` with the name
          which is configured in `settings.GUARDIAN_ROLES_ADMIN_ROLE_FOR_ROLE_ADMIN_ROLE` shall grant
          'guardian_roles.view_ownerbasedtemplaterole' and 'guardian_roles.change_ownerbasedtemplaterole' permissions.

        * Additionally the generated `OwnerBasedRole` shall relate to depending `ObjectBasedRole`
          instances.

        """
        # create one owner
        owner = get_owner_model().objects.create(name='owner-1')

        content_type = ContentType.objects.get_for_model(OwnerBasedRole)
        for template_role in TemplateRole.objects.all():
            # CONDITION 1: check if there are one `OwnerBasedRole` instance per `TemplateRole` instance.
            owner_role = OwnerBasedRole.objects.filter(content_object=owner,
                                                       based_template=template_role)
            self.assertEqual(1, owner_role.count())

            # CONDITION 2: check if there are one `ObjectBasedRole` instance which refers to the generated
            # `OwnerBasedRole`.
            obj_role = ObjectBasedRole.objects.filter(object_pk=owner_role[0].pk,
                                                      content_type=content_type,
                                                      based_template=None)
            self.assertEqual(1, obj_role.count())

            # CONDITION 3: check if permissions are granted
            checker = ObjectPermissionChecker(user_or_group=obj_role[0])
            self.assertTrue(checker.has_perm(perm='guardian_roles.view_ownerbasedrole', obj=owner_role[0]))
            self.assertTrue(checker.has_perm(perm='guardian_roles.change_ownerbasedrole', obj=owner_role[0]))

        owner_role = OwnerBasedRole.objects.get(
            content_object=owner,
            based_template__name=settings.GUARDIAN_ROLES_ADMIN_ROLE_FOR_ROLE_ADMIN_ROLE)
        obj_roles = ObjectBasedRole.objects.filter(based_template=None).order_by('id')

        # CONDITION 4:
        self.assertListEqual(list(obj_roles), list(owner_role.object_based_roles.all().order_by('id')))


class SignalM2MChangedOwnerTestCase(TestCase):
    """Test the m2m_changed signal on `OwnerBasedRole` model."""

    def setUp(self) -> None:
        self.role = TemplateRole.objects.create(name=settings.GUARDIAN_ROLES_ADMIN_ROLE_FOR_ROLE_ADMIN_ROLE)
        self.owner = get_owner_model().objects.create(name='owner-1')
        self.owner_role = OwnerBasedRole.objects.get(based_template=self.role)
        self.depending_groups = self.owner_role.object_based_roles.all()

    def test_user_adding_and_removing(self) -> None:
        """
        Checks the `handle_users_changed` receiver.

        Three conditions shall be generated by the receiver:

        * If a user is added to `OwnerBasedRole` the user shall be member of all depending
          `ObjectBasedRole` group.

        * If a user is removed to `OwnerBasedRole` the user shall not be member of all depending
          `ObjectBasedRole` group.
        """
        user = get_user_model().objects.create(username='user-1')

        # CONDITION 1: check if user is member of depending groups
        self.owner_role.users.add(user)
        for group in self.depending_groups:
            self.assertTrue(user.groups.filter(name=group.name).exists())

        # CONDITION 2: check if user is not member of depending groups
        self.owner_role.users.remove(user)
        for group in self.depending_groups:
            self.assertFalse(user.groups.filter(name=group.name).exists())

    def test_user_adding_and_removing_reverse(self) -> None:
        """
        Checks the `handle_users_changed` receiver.

        Three conditions shall be generated by the receiver:

        * If a user is added to `OwnerBasedRole` by using the reverse relation the user shall be member of all
          depending `ObjectBasedRole` group.

        * If a user is removed to `OwnerBasedRole` by using the reverse relation the user shall not be member of
          all depending `ObjectBasedRole` group.
        """
        user = get_user_model().objects.create(username='user-1')

        # CONDITION 1: check if user is member of depending groups
        user.role_set.add(self.owner_role)
        for group in self.depending_groups:
            self.assertTrue(user.groups.filter(name=group.name).exists())

        # CONDITION 2: check if user is not member of depending groups
        user.role_set.remove(self.owner_role)
        for group in self.depending_groups:
            self.assertFalse(user.groups.filter(name=group.name).exists())
