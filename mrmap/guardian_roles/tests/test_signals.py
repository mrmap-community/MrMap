from django.conf import settings
from django.contrib.contenttypes.models import ContentType
from django.test import TestCase
from guardian.core import ObjectPermissionChecker

from guardian_roles.models.core import TemplateRole, OwnerBasedTemplateRole, ObjectBasedTemplateRole
from guardian_roles.utils import get_owner_model


class SignalPostSaveOwnerTestCase(TestCase):
    """Test the post_save signal on `Owner` model."""
    def setUp(self):
        TemplateRole.objects.create(name=settings.GUARDIAN_ROLES_ADMIN_ROLE_FOR_ROLE_ADMIN_ROLE)
        TemplateRole.objects.create(name='some_other_role')

    def test_post_save_signal_on_owner_model(self):
        """
        Checks the `handle_owner_based_template_role_creation` receiver.

        Three conditions shall be generated by the receiver:

        * If a owner is created, one `OwnerBasedTemplateRole`  per `TemplateRole` shall be created.

        * Additionally one `ObjectBasedTemplateRole` per generated `OwnerBasedTemplateRole`.

        * Additionally the generated `OwnerBasedTemplateRole` which is generated from the `TemplateRole` with the name
          which is configured in `settings.GUARDIAN_ROLES_ADMIN_ROLE_FOR_ROLE_ADMIN_ROLE` shall grant
          'guardian_roles.view_ownerbasedtemplaterole' and 'guardian_roles.change_ownerbasedtemplaterole' permissions.

        """
        # create one owner
        owner = get_owner_model().objects.create(organization_name='owner-1')

        content_type = ContentType.objects.get_for_model(OwnerBasedTemplateRole)
        for template_role in TemplateRole.objects.all():
            # CONDITION 1: check if there are one `OwnerBasedTemplateRole` instance per `TemplateRole` instance.
            owner_role = OwnerBasedTemplateRole.objects.filter(content_object=owner,
                                                               based_template=template_role)
            self.assertEqual(1, owner_role.count())

            # CONDITION 2: check if there are one `ObjectBasedTemplateRole` instance which refers to the generated
            # `OwnerBasedTemplateRole`.
            obj_role = ObjectBasedTemplateRole.objects.filter(object_pk=owner_role[0].pk,
                                                              content_type=content_type,
                                                              based_template=None)
            self.assertEqual(1, obj_role.count())

            # CONDITION 3: check if permissions are granted
            checker = ObjectPermissionChecker(user_or_group=obj_role[0])
            self.assertTrue(checker.has_perm(perm='guardian_roles.view_ownerbasedtemplaterole', obj=owner_role[0]))
            self.assertTrue(checker.has_perm(perm='guardian_roles.change_ownerbasedtemplaterole', obj=owner_role[0]))
