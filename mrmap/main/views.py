from django.contrib.messages.views import SuccessMessageMixin
from django.core.exceptions import ImproperlyConfigured
from django.views.generic import DetailView, DeleteView, UpdateView, CreateView
from guardian.mixins import LoginRequiredMixin, PermissionRequiredMixin, PermissionListMixin
from MrMap.views import CustomSingleTableMixin, SuccessMessageDeleteMixin, GenericViewContextMixin, InitFormMixin, \
    ConfirmView, DependingListView
from django.contrib.auth.mixins import PermissionRequiredMixin as DjangoPermissionRequiredMixin


class GenericPermissionMixin:
    action = None

    def get_default_permission(self):
        """return the default view permission of the given model in format: 'app_label.model_name'"""
        if not self.action:
            raise ImproperlyConfigured("`GenericPermissionRequiredMixin` requires 'action' attribute to be set to "
                                       "default permission action like 'view' but is set to 'None'")
        return f"{self.model._meta.app_label}.{self.action}_{self.model._meta.model_name.lower()}"


class GenericPermissionRequiredMixin(GenericPermissionMixin, PermissionRequiredMixin):
    raise_exception = True
    action = None

    def get_required_permissions(self, request=None):
        """return the default view permission of the given model in format: 'app_label.model_name' if
        self.permission_required is None. Else the permission is generated by the self.action attribute.
        """
        if self.permission_required:
            return super().get_required_permissions(request=request)
        return [self.get_default_permission()]


class GenericPermissionListMixin(GenericPermissionMixin, PermissionListMixin):
    raise_exception = True
    action = None

    def get_required_permissions(self, request=None):
        """return the default view permission of the given model in format: 'app_label.model_name' if
        self.permission_required is None. Else the permission is generated by the self.action attribute.
        """
        if self.permission_required:
            return super().get_required_permissions(request=request)
        return [self.get_default_permission()]


class GenericGlobalPermissionRequiredMixin(GenericPermissionMixin, DjangoPermissionRequiredMixin):
    raise_exception = True
    action = None

    def get_permission_required(self):
        """return the default view permission of the given model in format: 'app_label.model_name' if
        self.permission_required is None. Else the permission is generated by the self.action attribute.
        """
        if self.permission_required:
            return super().get_permission_required()
        return (self.get_default_permission(), )


class SecuredCreateView(LoginRequiredMixin, GenericGlobalPermissionRequiredMixin, GenericViewContextMixin, SuccessMessageDeleteMixin, CreateView):
    """
    Secured django `CreateView` class with default permission '<app_label>.add_<model_name>'
    """
    action = 'add'
    accept_global_perms = True

    def get_required_permissions(self, request=None):
        """return the default view permission of the given model in format: 'app_label.model_name' if
        self.permission_required is None. Else the permission is generated by the self.action attribute.
        """
        if self.permission_required:
            return super().get_required_permissions(request=request)
        return [self.get_default_permission()]


class SecuredDetailView(LoginRequiredMixin, GenericPermissionRequiredMixin, GenericViewContextMixin, DetailView):
    """
    Secured django `DetailView` class with default permission '<app_label>.view_<model_name>'
    """
    action = 'view'


class SecuredDeleteView(LoginRequiredMixin, PermissionRequiredMixin, GenericViewContextMixin, SuccessMessageDeleteMixin, DeleteView):
    """
    Secured django `DeleteView` class with default permission '<app_label>.delete_<model_name>'
    """
    action = 'delete'


class SecuredUpdateView(LoginRequiredMixin, PermissionRequiredMixin, GenericViewContextMixin, InitFormMixin, SuccessMessageMixin, UpdateView):
    """
    Secured django `UpdateView` class with default permission '<app_label>.change_<model_name>'
    """
    action = 'change'


class SecuredListMixin(LoginRequiredMixin, GenericPermissionListMixin, CustomSingleTableMixin):
    """
    Secured django-tables2 table mixin class with default permission '<app_label>.view_<model_name>'
    """
    action = 'view'


class SecuredDependingListMixin(DependingListView, SecuredListMixin):
    """
    Secured `DependingListView` mixin class with default permission '<app_label>.view_<model_name>'
    """


class SecuredConfirmView(LoginRequiredMixin, PermissionRequiredMixin, GenericViewContextMixin, InitFormMixin, SuccessMessageMixin, ConfirmView):
    """
    Secured `ConfirmView` class with default permission '<app_label>.change_<model_name>'
    """
    action = 'change'
