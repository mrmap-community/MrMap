# common classes for handling of WMS (OGC WebMapServices)
# http://www.opengeospatial.org/standards/wms
"""Common classes to handle WMS (OGC WebMapServices).

.. moduleauthor:: Armin Retterath <armin.retterath@gmail.com>

"""
from service.helper.enums import VersionTypes
from service.helper.ogc.ows import OGCWebService
from service.helper.ogc.layer import OGCLayer

from lxml import etree
import re

from service.helper import service_helper


class OGCWebMapServiceFactory:
    """ Creates the correct OGCWebMapService objects

    """
    def get_ogc_wms(self, version: VersionTypes, service_connect_url: str):
        """ Returns the correct implementation of an OGCWebMapService according to the given version

        Args:
            version: The version number of the service
            service_connect_url: The capabilities request uri
        Returns:
            An OGCWebMapService
        """
        if version is VersionTypes.V_1_0_0:
            return OGCWebMapService_1_0_0(service_connect_url=service_connect_url)
        if version is VersionTypes.V_1_1_0:
            return OGCWebMapService_1_1_0(service_connect_url=service_connect_url)
        if version is VersionTypes.V_1_1_1:
            return OGCWebMapService_1_1_1(service_connect_url=service_connect_url)
        if version is VersionTypes.V_1_3_0:
            return OGCWebMapService_1_3_0(service_connect_url=service_connect_url)


class OGCWebMapService(OGCWebService):
    """Base class for OGC WebMapServices."""

    # define layers as array of OGCWebMapServiceLayer objects
    layers = []

    class Meta:
        abstract = True

    def __parse_layers_recursive(self, layers_string, layer_position=0, layer_parent=None, layer_lft=None):
        """Recursive function to create and add OGCWebMapServiceLayer objects to the OGCWebMapService object.
        The information is extracted from a given nested Layer-part of a OGC WMS Capabilities document.

        Parameters
        ----------
        layers_string : str
            The XML-snippet with the whole Layer-part of a OGC WMS Capabilities document
        layers_length : int
            The count of all Layer elements
        layer_position : int
            The index (up from 0) for the next layer object which will be generated by the function
        layer_parent : int
            The index of the parent of the next layer

        Returns
        -------
        int
            The next free index for a layer used as new layer_position argument

        """
        root = etree.fromstring(layers_string)
        layer_tree = etree.ElementTree(root)
        # instantiate OGC WMS layer object
        layer = OGCWebMapServiceLayer()
        # write attributes
        layer.position = layer_position
        layer.parent = layer_parent
        
        # for mptt
        if layer_lft is not None:
            
            layer_rght = layer_lft+1
        else:
            layer_lft = 1
            layer_rght = 1
        
        layer.title = layer_tree.xpath('/Layer/Title')[0].text  # mandatory element
        # layer.abstract = layer_tree.xpath('/Layer/Abstract')[0].text
        if layer_tree.xpath('/Layer/Name'):
            layer.name = layer_tree.xpath('/Layer/Name')[0].text
        else:
            layer.name = "false"    
        # append layer to layers array
        self.layers.append(layer)
        # read sublayer if exists
        layer_parent = layer_position    

        for sub_layer in layer_tree.xpath('/Layer/Layer'):
            layer_position = layer_position + 1
            # invoke function recursively
            layer_position, layer_rght = self.parse_layers_recursive(etree.tostring(sub_layer), layer_position, layer_parent, layer_rght)

        # store lft and right values in layer object
        layer.lft = layer_lft
        layer.rgt = layer_rght

        return layer_position, layer_rght+1

    def __get_layers_recursive(self, layers, parent=None, position=0):
        """ Recursive Iteration over all children and subchildren.

        Creates OGCWebMapLayer objects for each xml layer and fills it with the layer content.

        Args:
            layers: An array of layers (In fact the children of the parent layer)
            parent: The parent layer. If no parent exist it means we are in the root layer
            position: The position inside the layer tree, which is more like an order number
        :return:
        """
        for layer in layers:
            # iterate over all top level layer and find their children
            layer_obj = OGCWebMapServiceLayer()
            layer_obj.parent = parent
            layer_obj.position = position
            try:
                bbox = layer.xpath("./LatLonBoundingBox")[0]
                bbox = [
                    bbox.get("minx"),
                    bbox.get("miny"),
                    bbox.get("maxx"),
                    bbox.get("maxy"),
                ]
                layer_obj.latlon_extent = bbox
            except IndexError:
                pass
            try:
                name = layer.xpath("./Name")[0].text
                layer_obj.identifier = name
            except IndexError:
                pass
            try:
                abstract = layer.xpath("./Abstract")[0].text
                layer_obj.abstract = abstract
            except IndexError:
                pass
            try:
                title = layer.xpath("./Title")[0].text
                layer_obj.title = title
            except IndexError:
                pass
            try:
                is_queryable = layer.get("queryable")
                if is_queryable is None:
                    is_queryable = False
                else:
                    is_queryable = service_helper.resolve_boolean_attribute_val(is_queryable)
                layer_obj.is_queryable = is_queryable
            except AttributeError:
                pass
            try:
                is_opaque = layer.get("opaque")
                if is_opaque is None:
                    is_opaque = False
                else:
                    is_opaque = service_helper.resolve_boolean_attribute_val(is_opaque)
                layer_obj.is_opaque = is_opaque
            except AttributeError:
                pass
            try:
                is_opaque = layer.get("cascaded")
                if is_opaque is None:
                    is_opaque = False
                else:
                    is_opaque = service_helper.resolve_boolean_attribute_val(is_opaque)
                layer_obj.is_cascaded = is_opaque
            except AttributeError:
                pass
            self.layers.append(layer_obj)
            sublayers = layer.xpath("./Layer")
            position += 1
            self.__get_layers_recursive(layers=sublayers, parent=layer_obj, position=position)

    def get_layers(self, xml_obj):
        """ Parses all layers of a service and creates objects for it.

        Uses recursion on the inside to get all children.

        Args:
            xml_obj: The iterable xml tree
        Returns:
             nothing
        """
        # get most upper parent layer, which normally lives directly in <Capability>
        layers = xml_obj.xpath("//Capability/Layer")
        self.__get_layers_recursive(layers)

    def create_from_capabilities(self):
        """ Fills the object with data from the capabilities document

        Returns:
             nothing
        """
        # get xml as iterable object
        xml_obj = service_helper.parse_xml(xml=self.service_capabilities_xml)
        if self.service_version is VersionTypes.V_1_0_0:
            self.get_service_metadata_v100(xml_obj=xml_obj)
        if self.service_version is VersionTypes.V_1_1_0:
            self.get_service_metadata_v110(xml_obj=xml_obj)
        if self.service_version is VersionTypes.V_1_1_1:
            self.get_service_metadata_v111(xml_obj=xml_obj)
        if self.service_version is VersionTypes.V_1_3_0:
            self.get_service_metadata_v130(xml_obj=xml_obj)
        self.get_layers(xml_obj=xml_obj)


class OGCWebMapServiceLayer(OGCLayer):
    pass


class OGCWebMapService_1_0_0(OGCWebMapService):
    """ The WMS class for standard version 1.0.0

    """
    pass


class OGCWebMapService_1_1_0(OGCWebMapService):
    """ The WMS class for standard version 1.1.0

    """
    pass


class OGCWebMapService_1_1_1(OGCWebMapService):
    """ The WMS class for standard version 1.1.1

    """
    pass


class OGCWebMapService_1_3_0(OGCWebMapService):
    """ The WMS class for standard version 1.3.0

    """
            
    # https://stackoverflow.com/questions/34009992/python-elementtree-default-namespace
    # def create_from_capabilities(self):
    #     # Remove the default namespace definition (xmlns="http://some/namespace")
    #     xmlstring = re.sub(r'\sxmlns="[^"]+"', '', self.service_capabilities_xml, count=1)
    #     root = etree.XML(str.encode(xmlstring))
    #     tree = etree.ElementTree(root)
    #     # service metadata
    #     r = tree.xpath('/WMS_Capabilities/Service/Title')
    #     self.service_identification_title = r[0].text
    #     r = tree.xpath('/WMS_Capabilities/Service/Abstract')
    #     self.service_identification_abstract = r[0].text
    #     r = tree.xpath('/WMS_Capabilities/Service/KeywordList/Keyword')
    #     for keyword in r:
    #         self.service_identification_keywords.append(keyword.text)
    #         # print(keyword.text)
    #     r = tree.xpath('/WMS_Capabilities/Service/Fees')
    #     self.service_identification_fees = r[0].text
    #     r = tree.xpath('/WMS_Capabilities/Service/AccessConstraints')
    #     self.service_identification_accessconstraints = r[0].text
    #
    #     #p arse layer objects recursive
    #     layers = tree.xpath('/WMS_Capabilities/Capability/Layer')
    #     for layer in layers:
    #         self.parse_layers_recursive(etree.tostring(layer), 0)
    #     # transform to mptt
    #
    #     # debug output
    #     for layer in self.layers:
    #         print(layer.position, layer.parent, layer.title)
