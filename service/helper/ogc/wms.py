# common classes for handling of WMS (OGC WebMapServices)
# http://www.opengeospatial.org/standards/wms
"""Common classes to handle WMS (OGC WebMapServices).

.. moduleauthor:: Armin Retterath <armin.retterath@gmail.com>

"""

from service.helper.ogc.ows import OGCWebService
from service.helper.ogc.layer import OGCLayer

from lxml import etree
import re

from service.helper import service_helper

class OGCWebMapService(OGCWebService):
    """Base class for OGC WebMapServices."""
    # declare common attributes
    # self.layer
    # self.layers = [OGCWebMapServiceLayer()]
    # testurl with 1.400 layers "http://srss-ows.landgate.wa.gov.au/wxs/firewatch.php?"
    def parse_layers_recursive(self, layers_string, layer_position=0, layer_parent=None, layer_lft=None):
        """Recursive function to create and add OGCWebMapServiceLayer objects to the OGCWebMapService object.
        The information is extracted from a given nested Layer-part of a OGC WMS Capabilities document.

        Parameters
        ----------
        layers_string : str
            The XML-snippet with the whole Layer-part of a OGC WMS Capabilities document
        layers_length : int
            The count of all Layer elements
        layer_position : int
            The index (up from 0) for the next layer object which will be generated by the function
        layer_parent : int
            The index of the parent of the next layer

        Returns
        -------
        int
            The next free index for a layer used as new layer_position argument

        """
        root = etree.fromstring(layers_string)
        layer_tree = etree.ElementTree(root)
        # instantiate OGC WMS layer object
        layer = OGCWebMapServiceLayer()
        # write attributes
        layer.position = layer_position
        layer.parent = layer_parent
        
        # for mptt
        if layer_lft is not None:
            
            layer_rght = layer_lft+1
        else:
            layer_lft = 1
            layer_rght = 1
        
        layer.title = layer_tree.xpath('/Layer/Title')[0].text  # mandatory element
        # layer.abstract = layer_tree.xpath('/Layer/Abstract')[0].text
        if layer_tree.xpath('/Layer/Name'):
            layer.name = layer_tree.xpath('/Layer/Name')[0].text
        else:
            layer.name = "false"    
        # append layer to layers array
        self.layers.append(layer)
        # read sublayer if exists
        layer_parent = layer_position    

        for sub_layer in layer_tree.xpath('/Layer/Layer'):
            layer_position = layer_position + 1
            # invoke function recursively
            layer_position, layer_rght = self.parse_layers_recursive(etree.tostring(sub_layer), layer_position, layer_parent, layer_rght)

        # store lft and right values in layer object
        layer.lft = layer_lft
        layer.rgt = layer_rght

        return layer_position, layer_rght+1
    
    """def recursive_generate_mptt_attributes(self, parent, left):
        #https://www.sitepoint.com/hierarchical-data-database-3/
        right = left + 1
        #
        #print('type: ')
        #print(type(self.layers))
        for sub_layer in next(filter(lambda x: x.parent == parent, self.layers)):
            right = self.recursive_generate_mptt_attributes(sub_layer.position, right)
            
        sub_layer.lft = left
        sub_layer.rgt = right
        
        return right + 1"""

    def __get_layers_recursive(self, layers, parent=None, position=0):
        for layer in layers:
            # iterate over all top level layer and find their children
            layer_obj = OGCWebMapServiceLayer()
            layer_obj.parent = parent
            layer_obj.position = position
            try:
                bbox = layer.xpath("./LatLonBoundingBox")[0]
                bbox = [
                    bbox.get("minx"),
                    bbox.get("miny"),
                    bbox.get("maxx"),
                    bbox.get("maxy"),
                ]
                layer_obj.latlon_extent = bbox
            except IndexError:
                pass
            try:
                name = layer.xpath("./Name")[0].text
                layer_obj.name = name
            except IndexError:
                pass
            try:
                abstract = layer.xpath("./Abstract")[0].text
                layer_obj.abstract = abstract
            except IndexError:
                pass
            try:
                title = layer.xpath("./Title")[0].text
                layer_obj.title = title
            except IndexError:
                pass
            self.layers.append(layer_obj)
            sublayers = layer.xpath("./Layer")
            position += 1
            self.__get_layers_recursive(layers=sublayers, parent=layer_obj, position=position)



    def get_layers(self, xml_obj):
        # get most upper parent layer, which normally lives directly in <Capability>
        layers = xml_obj.xpath("//Capability/Layer")
        self.__get_layers_recursive(layers)
        i = 0



    # define layers as array of OGCWebMapServiceLayer objects
    layers = []
    
    class Meta:
        abstract = True

class OGCWebMapServiceLayer(OGCLayer):
    #declare common attributes
        pass
    #self. 

class OGCWebMapService_1_0_0(OGCWebMapService):
    pass

class OGCWebMapService_1_1_0(OGCWebMapService):
    pass

class OGCWebMapService_1_1_1(OGCWebMapService):
    
    xml_version = None
    # def __init__(self):
    #    self.create_from_xml()
    #    pass
        
    def create_from_capabilities(self):
        # get xml as iterable object
        xml_obj = service_helper.parse_xml(xml=self.service_capabilities_xml)
        self.get_service_metadata(xml_obj=xml_obj)
        self.get_layers(xml_obj=xml_obj)

        # ARMIN______________________________________________________________________
        # root = etree.XML(str.encode(self.service_capabilities_xml))
        #
        # tree = etree.ElementTree(root)
        # #service metadata
        # r = tree.xpath('/WMT_MS_Capabilities/Service/Title')
        # self.service_identification_title = r[0].text
        # r = tree.xpath('/WMT_MS_Capabilities/Service/Abstract')
        # self.service_identification_abstract = r[0].text
        # r = tree.xpath('/WMT_MS_Capabilities/Service/Keywords')
        # for keyword in r:
        #     self.service_identification_keywords.append(keyword.text)
        # #r = tree.xpath('/WMT_MS_Capabilities/Service/Fees')
        # #self.service_identification_fees = r[0].text
        # #r = tree.xpath('/WMT_MS_Capabilities/Service/AccessConstraints')
        # #self.service_identification_accessconstraints = r[0].text
        # #parse layer objects recursive
        # layers = tree.xpath('/WMT_MS_Capabilities/Capability/Layer')
        # #number_of_layers = len(tree.xpath('//Layer'))
        #
        # for layer in layers:
        #     self.parse_layers_recursive(etree.tostring(layer), 0, 1)
        #
        # #generate mptt attributes
        # #self.recursive_generate_mptt_attributes(None, 1)
        # #debug output
        # for layer in self.layers:
        #     print(layer.position, layer.parent, layer.lft, layer.rgt, layer.title)
        #
#
        # #self.xml_version = tree.docinfo.xml_version
        # #print(self.xml_version)
        #
        #
        # #self.xml_version = tree.docinfo.xml_version
        # #print(self.xml_version)

class OGCWebMapService_1_3_0(OGCWebMapService):
            
    #https://stackoverflow.com/questions/34009992/python-elementtree-default-namespace
    def create_from_capabilities(self):
        # Remove the default namespace definition (xmlns="http://some/namespace")
        xmlstring = re.sub(r'\sxmlns="[^"]+"', '', self.service_capabilities_xml, count=1) 
        root = etree.XML(str.encode(xmlstring))
        tree = etree.ElementTree(root)
        #service metadata
        r = tree.xpath('/WMS_Capabilities/Service/Title')
        self.service_identification_title = r[0].text
        r = tree.xpath('/WMS_Capabilities/Service/Abstract')
        self.service_identification_abstract = r[0].text
        r = tree.xpath('/WMS_Capabilities/Service/KeywordList/Keyword')
        for keyword in r:
            self.service_identification_keywords.append(keyword.text)
            #print(keyword.text)
        r = tree.xpath('/WMS_Capabilities/Service/Fees')
        self.service_identification_fees = r[0].text
        r = tree.xpath('/WMS_Capabilities/Service/AccessConstraints')
        self.service_identification_accessconstraints = r[0].text
        
        #parse layer objects recursive
        layers = tree.xpath('/WMS_Capabilities/Capability/Layer')
        for layer in layers:
            self.parse_layers_recursive(etree.tostring(layer), 0)
        #transform to mptt
        
        #debug output
        for layer in self.layers:
            print(layer.position, layer.parent, layer.title)
