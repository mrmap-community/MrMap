from io import StringIO
from django.core.management import call_command
from django.test import TestCase
from django.utils import timezone
from service.models import Service
from tests.baker_recipes.db_setup import create_superadminuser, create_non_autogenerated_orgas, create_wms_service, \
    create_wfs_service


class RemoveUpdatecandidates(TestCase):

    def test_command_output(self):
        out = StringIO()
        call_command('rm_updatecandidates', stdout=out)
        self.assertIn('Deleted 0 objects older than 7 days', out.getvalue())

    def test_removing_of_updatecandidates(self):
        older_than = 10

        user = create_superadminuser()
        organizations = create_non_autogenerated_orgas(user=user)

        wms_metadatas = create_wms_service(group=user.get_groups.first(), contact=organizations[0], how_much_services=10)
        wfs_metadatas = create_wfs_service(group=user.get_groups.first(), contact=organizations[0], how_much_services=10)

        for wms_metadata in wms_metadatas:
            update_candidate_metadata = create_wms_service(group=user.get_groups.first(), contact=organizations[0], how_much_services=1, is_update_candidate_for=wms_metadata.service, user=user)

            update_candidate_metadata[0].service.last_modified = timezone.localtime() - timezone.timedelta(days=older_than, )
            update_candidate_metadata[0].service.save(update_last_modified=False)

        for wfs_metadata in wfs_metadatas:
            update_candidate_metadata = create_wfs_service(group=user.get_groups.first(), contact=organizations[0], how_much_services=1, is_update_candidate_for=wfs_metadata.service, user=user)
            update_candidate_metadata[0].service.last_modified = timezone.localtime() - timezone.timedelta(days=older_than)
            update_candidate_metadata[0].service.save(update_last_modified=False)

        out = StringIO()
        call_command('rm_updatecandidates', stdout=out, ot=older_than)
        self.assertIn('Deleted 20 objects older than {} days'.format(older_than), out.getvalue())

        services_count = Service.objects.filter(is_root=True).count()
        self.assertEqual(services_count, 20)
