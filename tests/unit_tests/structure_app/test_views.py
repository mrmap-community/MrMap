from django.contrib.messages import get_messages
from django.test import TestCase, Client
from django.urls import reverse
from MapSkinner.messages import ORGANIZATION_CAN_NOT_BE_OWN_PARENT
from MapSkinner.settings import HTTP_OR_SSL, HOST_NAME
from structure.forms import GroupForm, OrganizationForm, RemoveOrganizationForm, PublisherForOrganizationForm
from structure.settings import PENDING_REQUEST_TYPE_PUBLISHING
from structure.models import Organization, PendingTask
from structure.tables import GroupTable, OrganizationTable, PublisherTable, PublisherRequestTable
from tests.baker_recipes.db_setup import create_superadminuser, create_non_autogenerated_orgas, create_guest_groups, \
    create_pending_request, create_pending_task
from tests.baker_recipes.structure_app.baker_recipes import PASSWORD


class StructureIndexViewTestCase(TestCase):

    def setUp(self):
        # creates user object in db
        self.user_password = PASSWORD
        self.groups = create_guest_groups(how_much_groups=9)
        self.user = create_superadminuser(groups=self.groups)
        self.orgas = create_non_autogenerated_orgas(user=self.user,
                                                    how_much_orgas=10)
        self.user.organization = self.orgas[0]
        self.user.save()
        self.user.refresh_from_db()
        self.pending_request = create_pending_request(group=self.groups[0],
                                                      orga=self.user.organization,
                                                      type_str=PENDING_REQUEST_TYPE_PUBLISHING,
                                                      how_much_requests=10)

        self.pending_tasks = create_pending_task(group=self.groups[0], how_much_pending_tasks=10)

        self.client = Client()
        self.client.login(username=self.user.username,
                          password=self.user_password)

    def test_get_index(self):
        response = self.client.get(
            reverse('structure:index', ),
        )
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, template_name="views/structure_index.html")

        self.assertIsInstance(response.context['groups'], GroupTable)
        self.assertEqual(len(response.context['groups'].rows), 10)
        self.assertEqual(len(response.context['groups'].page.object_list), 5)

        self.assertIsInstance(response.context['organizations'], OrganizationTable)
        self.assertEqual(len(response.context['organizations'].rows), 10)
        self.assertEqual(len(response.context['organizations'].page.object_list), 5)

        self.assertIsInstance(response.context['new_group_form'], GroupForm)
        self.assertIsInstance(response.context['new_organization_form'], OrganizationForm)

    def test_get_groups_index(self):
        response = self.client.get(
            reverse('structure:groups-index', ),
        )
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, template_name="views/groups_index.html")

        self.assertIsInstance(response.context['groups'], GroupTable)
        self.assertEqual(len(response.context['groups'].rows), 10)
        self.assertEqual(len(response.context['groups'].page.object_list), 5)

        self.assertIsInstance(response.context['new_group_form'], GroupForm)

        #self.assertEqual(response.context['pub_requests_count'], 10)

    def test_get_organization_index(self):
        response = self.client.get(
            reverse('structure:organizations-index', ),
        )
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, template_name="views/organizations_index.html")

        self.assertIsInstance(response.context['organizations'], OrganizationTable)
        self.assertEqual(len(response.context['organizations'].rows), 10)
        self.assertEqual(len(response.context['organizations'].page.object_list), 5)

        self.assertIsInstance(response.context['new_organization_form'], OrganizationForm)

        #self.assertEqual(response.context['pub_requests_count'], 10)


class StructurePendingTaskViewTestCase(TestCase):
    def setUp(self):
        # creates user object in db
        self.user_password = PASSWORD
        self.groups = create_guest_groups(how_much_groups=9)
        self.user = create_superadminuser(groups=self.groups)
        self.orgas = create_non_autogenerated_orgas(user=self.user,
                                                    how_much_orgas=10)
        self.user.organization = self.orgas[0]
        self.user.save()
        self.user.refresh_from_db()
        self.pending_request = create_pending_request(group=self.groups[0],
                                                      orga=self.user.organization,
                                                      type_str=PENDING_REQUEST_TYPE_PUBLISHING,
                                                      how_much_requests=10)

        self.pending_tasks = create_pending_task(group=self.groups[0], how_much_pending_tasks=10)

        self.client = Client()
        self.client.login(username=self.user.username,
                          password=self.user_password)

    def test_remove_pending_task(self):
        response = self.client.get(
            reverse('structure:remove-task',
                    args=(self.pending_tasks[0].id,)),
                    HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 302)
        self.assertEqual(PendingTask.objects.all().count(), 9)


class StructureDetailViewTestCase(TestCase):
    def setUp(self):
        # creates user object in db
        self.user_password = PASSWORD
        self.groups = create_guest_groups(how_much_groups=9)
        self.user = create_superadminuser(groups=self.groups)
        self.orgas = create_non_autogenerated_orgas(user=self.user,
                                                    how_much_orgas=10)
        self.user.organization = self.orgas[0]
        self.user.save()
        self.user.refresh_from_db()
        self.pending_request = create_pending_request(group=self.groups[0],
                                                      orga=self.user.organization,
                                                      type_str=PENDING_REQUEST_TYPE_PUBLISHING,
                                                      how_much_requests=10)

        self.pending_tasks = create_pending_task(group=self.groups[0], how_much_pending_tasks=10)

        self.client = Client()
        self.client.login(username=self.user.username,
                          password=self.user_password)

    def test_get_detail_organization(self):
        response = self.client.get(
            reverse('structure:detail-organization',
                    args=(self.orgas[0].id,)),
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response=response, template_name="views/organizations_detail.html")
        self.assertIsInstance(response.context['organization'], Organization)

        self.assertIsInstance(response.context['edit_organization_form'], OrganizationForm)
        self.assertIsInstance(response.context['delete_organization_form'], RemoveOrganizationForm)
        self.assertIsInstance(response.context['publisher_form'], PublisherForOrganizationForm)

        self.assertIsInstance(response.context['all_publisher_table'], PublisherTable)
        self.assertIsInstance(response.context['pub_requests_table'], PublisherRequestTable)
        self.assertEqual(len(response.context['pub_requests_table'].rows), 10)


class StructureEditOrganizationViewTestCase(TestCase):
    def setUp(self):
        # creates user object in db
        self.user_password = PASSWORD
        self.groups = create_guest_groups(how_much_groups=9)
        self.user = create_superadminuser(groups=self.groups)
        self.orgas = create_non_autogenerated_orgas(user=self.user,
                                                    how_much_orgas=10)
        self.user.organization = self.orgas[0]
        self.user.save()
        self.user.refresh_from_db()
        self.pending_request = create_pending_request(group=self.groups[0],
                                                      orga=self.user.organization,
                                                      type_str=PENDING_REQUEST_TYPE_PUBLISHING,
                                                      how_much_requests=10)

        self.pending_tasks = create_pending_task(group=self.groups[0], how_much_pending_tasks=10)

        self.client = Client()
        self.client.login(username=self.user.username,
                          password=self.user_password)

    def test_permission_edit_organization(self):
        response = self.client.get(
            reverse('structure:edit-organization',
                    args=(self.orgas[0].id,)),
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 302)
        messages = [m.message for m in get_messages(response.wsgi_request)]
        self.assertIn('You do not have permissions for this!', messages)

    def test_valid_edit_organization(self):
        perm = self.user.get_groups()[0].role.permission
        perm.can_edit_organization = True
        perm.save()

        params = {
            'organization_name': 'TestOrga',
            'description': 'This is a test',
            'parent': self.orgas[1].id,
            'person_name': 'Test name',
            'email': 'test@example.com',
            'phone': '+12 34567890',
            'facsimile': 'qwertz',
            'city': 'Musterstadt',
            'postal_code': '12345',
            'address': 'Musterweg 123',
            'state_or_province': 'RLP',
            'country': 'Germany',
        }

        response = self.client.post(
            reverse('structure:edit-organization',
                    args=(self.orgas[0].id,)),
            data=params,
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 303)
        self.assertEqual(response.url, reverse('structure:detail-organization', args=(self.orgas[0].id,)))

    def test_invalid_edit_organization(self):
        perm = self.user.get_groups()[0].role.permission
        perm.can_edit_organization = True
        perm.save()

        params = {
            'organization_name': 'TestOrga',
            'description': 'This is a test',
            'parent': self.orgas[0].id,
            'person_name': 'Test name',
            'email': 'test@example.com',
            'phone': '+12 34567890',
            'facsimile': 'qwertz',
            'city': 'Musterstadt',
            'postal_code': '12345',
            'address': 'Musterweg 123',
            'state_or_province': 'RLP',
            'country': 'Germany',
        }

        response = self.client.post(
            reverse('structure:edit-organization',
                    args=(self.orgas[0].id,)),
            data=params,
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 422)
        self.assertTrue(response.context['show_edit_organization_form'])
        self.assertFormError(response, 'edit_organization_form', 'parent', ORGANIZATION_CAN_NOT_BE_OWN_PARENT)


class StructureRemoveOrganizationViewTestCase(TestCase):
    def setUp(self):
        # creates user object in db
        self.user_password = PASSWORD
        self.groups = create_guest_groups(how_much_groups=9)
        self.user = create_superadminuser(groups=self.groups)
        self.orgas = create_non_autogenerated_orgas(user=self.user,
                                                    how_much_orgas=10)
        self.user.organization = self.orgas[0]
        self.user.save()
        self.user.refresh_from_db()
        self.pending_request = create_pending_request(group=self.groups[0],
                                                      orga=self.user.organization,
                                                      type_str=PENDING_REQUEST_TYPE_PUBLISHING,
                                                      how_much_requests=10)

        self.pending_tasks = create_pending_task(group=self.groups[0], how_much_pending_tasks=10)

        self.client = Client()
        self.client.login(username=self.user.username,
                          password=self.user_password)

    def test_get_remove_organization(self):
        perm = self.user.get_groups()[0].role.permission
        perm.can_delete_organization = True
        perm.save()

        response = self.client.get(
            reverse('structure:delete-organization',
                    args=(self.orgas[0].id,)),
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 303)
        self.assertEqual(response.url, reverse('structure:detail-organization', args=(self.orgas[0].id,)))

    def test_post_invalid_remove_organization(self):
        perm = self.user.get_groups()[0].role.permission
        perm.can_delete_organization = True
        perm.save()

        response2 = self.client.post(
            reverse('structure:delete-organization',
                    args=(self.orgas[0].id,)),
            data={},
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response2.status_code, 422)
        self.assertTrue(response2.context['show_delete_organization_form'])
        self.assertFormError(response2, 'delete_organization_form', 'is_confirmed', 'This field is required.')

    def test_post_valid_remove_organization(self):
        perm = self.user.get_groups()[0].role.permission
        perm.can_delete_organization = True
        perm.save()

        org_name = self.orgas[0].organization_name

        response = self.client.post(
            reverse('structure:delete-organization',
                    args=(self.orgas[0].id,)),
            data={'is_confirmed': 'on',},
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 303)
        messages = [m.message for m in get_messages(response.wsgi_request)]
        self.assertIn('Organization {} successfully deleted.'.format(org_name), messages)

    def test_permission_remove_organization(self):
        response = self.client.get(
            reverse('structure:delete-organization',
                    args=(self.orgas[0].id,)),
            HTTP_REFERER=HTTP_OR_SSL + HOST_NAME
        )

        self.assertEqual(response.status_code, 302)
        messages = [m.message for m in get_messages(response.wsgi_request)]
        self.assertIn('You do not have permissions for this!', messages)
