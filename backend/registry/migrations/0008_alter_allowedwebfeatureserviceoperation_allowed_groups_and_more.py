# Generated by Django 4.0.3 on 2022-03-14 10:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('django_celery_results', '0011_taskresult_periodic_task_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('registry', '0007_alter_mapcontext_options'),
    ]

    operations = [
        migrations.AlterField(
            model_name='allowedwebfeatureserviceoperation',
            name='allowed_groups',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_allowed_operations', related_query_name='%(class)s_allowed_operation', to='auth.group'),
        ),
        migrations.AlterField(
            model_name='allowedwebmapserviceoperation',
            name='allowed_groups',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_allowed_operations', related_query_name='%(class)s_allowed_operation', to='auth.group'),
        ),
        migrations.AlterField(
            model_name='catalougeservice',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AlterField(
            model_name='catalougeservice',
            name='metadata_contact',
            field=models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AlterField(
            model_name='catalougeservice',
            name='service_contact',
            field=models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AlterField(
            model_name='catalougeserviceoperationurl',
            name='mime_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='%(class)s_operation_urls', related_query_name='%(class)s_operation_url', to='registry.mimetype', verbose_name='internet mime type'),
        ),
        migrations.AlterField(
            model_name='datasetmetadata',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AlterField(
            model_name='featuretype',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AlterField(
            model_name='featuretype',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='%(class)s', related_query_name='%(class)s', to='registry.referencesystem', verbose_name='reference systems'),
        ),
        migrations.AlterField(
            model_name='layer',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AlterField(
            model_name='layer',
            name='reference_systems',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all reference systems which this element supports', related_name='%(class)s', related_query_name='%(class)s', to='registry.referencesystem', verbose_name='reference systems'),
        ),
        migrations.AlterField(
            model_name='layergetfeatureinforesult',
            name='task_result',
            field=models.OneToOneField(editable=False, help_text='The result of the celery task', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_monitoring_results', related_query_name='%(class)s_monitoring_result', to='django_celery_results.taskresult', verbose_name='Task Result'),
        ),
        migrations.AlterField(
            model_name='layergetmapresult',
            name='task_result',
            field=models.OneToOneField(editable=False, help_text='The result of the celery task', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_monitoring_results', related_query_name='%(class)s_monitoring_result', to='django_celery_results.taskresult', verbose_name='Task Result'),
        ),
        migrations.AlterField(
            model_name='webfeatureservice',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AlterField(
            model_name='webfeatureservice',
            name='metadata_contact',
            field=models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AlterField(
            model_name='webfeatureservice',
            name='service_contact',
            field=models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AlterField(
            model_name='webfeatureservicehttprequestlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_http_request_logs', related_query_name='%(class)shttp_request_log', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='webfeatureserviceoperationurl',
            name='mime_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='%(class)s_operation_urls', related_query_name='%(class)s_operation_url', to='registry.mimetype', verbose_name='internet mime type'),
        ),
        migrations.AlterField(
            model_name='webmapservice',
            name='keywords',
            field=models.ManyToManyField(help_text='all keywords which are related to the content of this metadata.', related_name='%(class)s_metadata', related_query_name='%(class)s_metadata', to='registry.keyword', verbose_name='keywords'),
        ),
        migrations.AlterField(
            model_name='webmapservice',
            name='metadata_contact',
            field=models.ForeignKey(help_text='This is the contact for the metadata information.', on_delete=django.db.models.deletion.RESTRICT, related_name='metadata_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='metadata contact'),
        ),
        migrations.AlterField(
            model_name='webmapservice',
            name='service_contact',
            field=models.ForeignKey(help_text='This is the contact for the service provider.', on_delete=django.db.models.deletion.RESTRICT, related_name='service_contact_%(class)s_metadata', to='registry.metadatacontact', verbose_name='service contact'),
        ),
        migrations.AlterField(
            model_name='webmapservicehttprequestlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_http_request_logs', related_query_name='%(class)shttp_request_log', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='webmapserviceoperationurl',
            name='mime_types',
            field=models.ManyToManyField(blank=True, editable=False, help_text='all available mime types of the remote url', related_name='%(class)s_operation_urls', related_query_name='%(class)s_operation_url', to='registry.mimetype', verbose_name='internet mime type'),
        ),
        migrations.AlterField(
            model_name='wmsgetcapabilitiesresult',
            name='task_result',
            field=models.OneToOneField(editable=False, help_text='The result of the celery task', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_monitoring_results', related_query_name='%(class)s_monitoring_result', to='django_celery_results.taskresult', verbose_name='Task Result'),
        ),
    ]
