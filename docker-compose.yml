# docker compose file for productive useage
version: '3.8'
services:

  postgis:
    image: postgis/postgis:15-3.3-alpine
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data
    networks:
      - mrmap-internal
    env_file:
      - ./docker/postgis/.db.env

  redis:
    image: library/redis:7.2.3-alpine
    volumes:
      - type: volume
        source: mem-db-data
        target: /data
    networks:
      - mrmap-internal
    environment:
      - loglevel=error

  mapserver:
    image: camptocamp/mapserver:7.6
    volumes:
      - type: bind
        source: ./docker/mapserver/mapfiles
        target: /etc/mapserver/mapfiles
      - type: bind
        source: ./docker/mapserver/shapefiles
        target: /etc/mapserver/shapefiles
    networks:
      - mrmap-internal

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    hostname: "backend"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-static
        target: /var/www/mrmap/backend
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
    networks:
      - mrmap-internal
    env_file:
      - docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis
      - mapserver

  celery-worker:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    # deploy:
    #   replicas: 10
    command: >
      /bin/sh -c "celery -A MrMap worker -E -l INFO -Q download,default,db-routines"
    # Do not activate tty!!!!! This will freeze the worker process in case of console spamming. 
    # See: https://stackoverflow.com/questions/48021772/docker-process-hangs-on-write-system-call-to-stdout
    #tty: true # To support colorized log output.
    hostname: "celery-worker"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis
    cap_add:
      - SYS_PTRACE
    healthcheck:
      test: celery -A MrMap inspect ping || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 40s

    restart: always

  celery-beat:
    build:
      context: ./backend
      dockerfile: ../docker/backend/alpine.Dockerfile
      args:
        MRMAP_PRODUCTION: "True"
    command: >
      /bin/sh -c "celery -A MrMap beat --loglevel INFO --scheduler django"
    tty: true # To support colorized log output.
    hostname: "mrmap-celery-beat"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
      - type: volume
        source: backend-media
        target: /var/mrmap/backend/media
      - type: volume
        source: backend-log
        target: /var/log/mrmap/backend
      - type: volume
        source: backend-import
        target: /var/mrmap/import
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis

  frontend:
    build:
      context: ./
      dockerfile: ./docker/nginx/nginx.Dockerfile
      args:
        # For Production: Insert the correct schema and the correct hostname and port of the backend
        - VITE_API_BASE_URL=localhost:443
        - VITE_API_SCHEMA=https
    hostname: "nginx"
    volumes:
      # To provide a concrete certificate
      #- type: bind
      #  source: path-to-cert
      #  target: /etc/ssl/certs/nginx-selfsigned.crt
      #- type: bind
      #  source: path-to-cert-key
      #  target: /etc/ssl/private/nginx-selfsigned.key
      - type: bind
        source: ./docker/nginx/mrmap.conf
        target: /etc/nginx/conf.d/default.conf
      - type: volume
        source: backend-static
        target: /var/www/mrmap/backend
      - type: volume
        source: frontend-static
        target: /var/www/mrmap/frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - mrmap-internal
    extra_hosts:
      - host.docker.internal:host-gateway

volumes:
  frontend-static: null
  backend-static: null
  backend-media: null
  backend-log: null
  backend-import: null
  db-data: null
  mem-db-data:

    null
networks:
  mrmap-internal: null
