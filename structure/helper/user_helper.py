"""
Author: Michel Peltriaux
Organization: Spatial data infrastructure Rhineland-Palatinate, Germany
Contact: michel.peltriaux@vermkv.rlp.de
Created on: 07.05.19

"""
from django.contrib.auth.hashers import check_password
from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpRequest

from MapSkinner.settings import SESSION_EXPIRATION
from structure.models import User, Permission, Group


def get_user(username: str=None, user_id: int=None):
    """ Returns the user object matching to the given string

    Args:
        username: The username of the user
    Returns:
        Returns the user object if found, None otherwise
    """
    try:
        if username is not None:
            user = User.objects.get(username=username)
        elif user_id is not None:
            user = User.objects.get(id=user_id)
        return user
    except ObjectDoesNotExist:
        return None


def is_password_valid(user: User, password: str):
    """ Checks if the incoming password is valid for the user

    Args:
        user: The user object which needs to be checked against
        password: The password that might match to the user
    Returns:
         True or False
    """
    return check_password(password, user.password)


def get_permissions(user: User = None, group: Group = None):
    """ Overloaded function. Returns a list containing all permission identifiers as strings in a list.

    The list is generated by fetching all permissions from all groups the user is part of.
    Alternatively the list is generated by fetching all permissions from a special group.

    Args:
        user: The user object
        group: The group object
    Returns:
         A list of permission strings
    """
    all_perm = []
    groups = []
    if user is not None:
        groups = user.groups.all()
    elif group is not None:
        groups = [group]

    for group in groups:
        perm = group.role.permission
        for field_key, field_val in perm.__dict__.items():
            if field_val is True and field_key not in all_perm:
                all_perm.append(field_key)
    return all_perm


def check_permissions(all_permissions: list, permission_needed: Permission):
    """ Checks if needed permissions are provided by the users permission

    Args:
        all_permissions: A list of all user's permissions
        permission_needed: The permission that is needed
    Returns:
         True if all permissions are satisfied. False otherwise
    """
    permissions_needed = list(permission_needed.__dict__.keys())
    permissions_needed.remove("id")
    permissions_needed.remove("_state")
    for p_n in permissions_needed:
        if p_n not in all_permissions:
            return False
    return True


def is_session_expired(request: HttpRequest):
    """ Checks whether the current session is expired or not

    Args:
        request: The request
    Returns:
         Returns true if expired, false otherwise
    """
    age = request.session.get_expiry_age()
    if age > 0 and age <= SESSION_EXPIRATION:
        # expired
        return False
    else:
        return True
