# docker compose file for development useage
version: '3.8'
services:

  # Extend the existing postgis container with an accessible port for development purposes
  postgis:
    ports:
      - 5555:5432

  redis:
    ports:
      - 5556:6379

  inspire-validator:
    build:
      context: ./docker/inspire-validator
    ports:
      - "5557:8080"
    networks:
      - mrmap-internal
    extra_hosts:
      - host.docker.internal:host-gateway

  pre-commit-check:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      args:
        MRMAP_PRODUCTION: 'False'
    entrypoint: /opt/mrmap/.bash_scripts/wait_db.sh
    command: /bin/bash -c "/opt/mrmap/.bash_scripts/pre_commit_check.sh"
    hostname: "mrmap-test"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
    depends_on:
      - postgis
      - redis

  behave:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      args:
        MRMAP_PRODUCTION: 'False'
    shm_size: '2gb' # Fix 'Failed to decode response from marionette' (https://stackoverflow.com/questions/49734915/)
    tty: true # To support colorized log output of gherkin and other log information. 
    entrypoint: /opt/mrmap/.bash_scripts/wait_db.sh
    command: >
      /bin/bash -c "python -m coverage run --branch --source='/opt/mrmap'
      /opt/mrmap/manage.py behave --noinput --tags=-skip --no-skipped
      tests/behave/api/features && python -m coverage xml -i"
    hostname: "mrmap-behave"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
      - ./docker/backend/.mrmap.dev.env
    environment:
      - DJANGO_DEBUG=0
    depends_on:
      - postgis
      - redis

  django-tests:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      args:
        MRMAP_PRODUCTION: 'False'
    shm_size: '2gb' # Fix 'Failed to decode response from marionette' (https://stackoverflow.com/questions/49734915/)
    tty: true # To support colorized log output of gherkin and other log information. 
    entrypoint: /opt/mrmap/.bash_scripts/wait_db.sh
    command: >
      /bin/bash -c "python -m coverage run --branch --source='/opt/mrmap'
      ./manage.py test /opt/mrmap/tests/ --noinput && python
      -m coverage xml -i"
    hostname: "mrmap-django-tests"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
    networks:
      - mrmap-internal
    env_file:
      - ./docker/backend/.mrmap.env
      - ./docker/backend/.mrmap.dev.env
    environment:
      - DJANGO_DEBUG=0
    depends_on:
      - postgis
      - redis

  backend:
    build:
      args:
        MRMAP_PRODUCTION: "False"
    env_file:
      - docker/backend/.mrmap.env
      - docker/backend/.mrmap.dev.env
    command: /bin/bash -c "python manage.py runserver 0.0.0.0:8001"
    ports:
      - "8001:8001"

  celery-default-worker:
    build:
      args:
        MRMAP_PRODUCTION: "False"
    env_file:
      - ./docker/backend/.mrmap.env
      - ./docker/backend/.mrmap.dev.env
    command: >
      /bin/bash -c "watchmedo auto-restart --directory=./ --pattern=*.py
      --recursive -- celery -A MrMap worker -E -l DEBUG -n default -Q default"

  celery-download-worker:
    build:
      args:
        MRMAP_PRODUCTION: "False"
    env_file:
      - ./docker/backend/.mrmap.env
      - ./docker/backend/.mrmap.dev.env
    command: >
      /bin/bash -c "watchmedo auto-restart --directory=./ --pattern=*.py
      --recursive -- celery -A MrMap worker -E -l DEBUG -n download -Q
      download_iso_metadata,download_described_elements,harvest"

  nginx:
    volumes:
      - type: bind
        source: ./docker/nginx/mrmap.dev.conf
        target: /etc/nginx/conf.d/default.conf

  swagger-ui:
    image: swaggerapi/swagger-ui
    env_file:
      - ./docker/swagger/.swagger.env
    hostname: "mrmap-swagger-ui"
    networks:
      - mrmap-internal

  sonarqube:
    # initial admin account: admin:admin 
    image: sonarqube
    hostname: "mrmap-sonarqube"
    ports:
      - "0.0.0.0:9000:9000"
    volumes:
      - type: volume
        source: sonar-db
        target: /opt/sonarqube/data
    networks:
      - sonar

  sonar-scanner:
    image: sonarsource/sonar-scanner-cli
    volumes:
      - type: bind
        source: ./backend
        target: /opt/mrmap
    depends_on:
      - sonarqube
    networks:
      - sonar
    working_dir: /opt/mrmap

networks:
  sonar:

volumes:
  sonar-db: 
